{"version":3,"sources":["myscript.js","MyScript.js","point.js","quadraticPoint.js","rectangle.js","inkManager.js","penParameters.js","renderingParameters.js","mathUtils.js","abstractWSMessage.js","abstractComponent.js","stroke.js","strokeComponent.js","characterInputComponent.js","characterInputComponentAlternate.js","abstractParameter.js","abstractRecognitionInput.js","abstractRecognitionData.js","recognitionLanguagesData.js","abstractStartRequestWSMessage.js","abstractContinueRequestWSMessage.js","challengeRequestWSMessage.js","initRequestWSMessage.js","resetRequestWSMessage.js","abstractTextInputComponent.js","charInputComponent.js","stringInputComponent.js","textInputUnit.js","textParameter.js","textProperties.js","textRecognitionInput.js","textRecognitionData.js","textStartRequestWSMessage.js","textContinueRequestWSMessage.js","shapeParameter.js","shapeRecognitionInput.js","shapeRecognitionData.js","mathParameter.js","mathRecognitionInput.js","mathRecognitionData.js","mathStartRequestWSMessage.js","mathContinueRequestWSMessage.js","abstractMusicInputComponent.js","musicAccidentalInputComponent.js","musicArpeggiateInputComponent.js","musicBarInputComponent.js","musicBeamInputComponent.js","musicClefInputComponent.js","musicDecorationInputComponent.js","musicDotsInputComponent.js","musicHeadInputComponent.js","musicLedgerLineInputComponent.js","musicRestInputComponent.js","musicStemInputComponent.js","musicTieOrSlurInputComponent.js","musicTimeSignatureInputComponent.js","musicStaff.js","musicParameter.js","musicRecognitionInput.js","musicRecognitionData.js","analyzerParameter.js","analyzerRecognitionInput.js","analyzerRecognitionData.js","abstractResult.js","abstractRecoResponseWSMessage.js","challengeResponseWSMessage.js","errorResponseWSMessage.js","initResponseWSMessage.js","resetResponseWSMessage.js","textInkRange.js","textCandidate.js","textDocument.js","textResult.js","textSegment.js","textTagItem.js","textResponseWSMessage.js","abstractShapePrimitive.js","shapeCandidate.js","shapeDocument.js","shapeEllipse.js","shapeErased.js","shapeInkRange.js","shapeLine.js","shapeNotRecognized.js","shapeRecognized.js","shapeResult.js","shapeScratchOut.js","shapeSegment.js","mathNode.js","mathNonTerminalNode.js","mathResultElement.js","mathRuleNode.js","mathDocument.js","mathInkRange.js","mathLaTexResultElement.js","mathMathMLResultElement.js","mathResult.js","mathScratchOut.js","mathSymbolTreeResultElement.js","mathTerminalNode.js","mathTerminalNodeCandidate.js","mathBorderData.js","mathBorderNonTerminalNode.js","mathCellData.js","mathCellNonTerminalNode.js","mathTableData.js","mathTableRuleNode.js","mathResponseWSMessage.js","musicElement.js","musicResultElement.js","musicAccidental.js","musicAnnotation.js","musicArpeggiate.js","musicBar.js","musicBeam.js","musicChord.js","musicClef.js","musicDecoration.js","musicDocument.js","musicDots.js","musicHead.js","musicInputRange.js","musicKeySignature.js","musicKeySignatureData.js","musicLedgerLine.js","musicNote.js","musicPart.js","musicPitchData.js","musicRest.js","musicResult.js","musicScore.js","musicScoreTreeResultElement.js","musicScratchOut.js","musicSlur.js","musicStem.js","musicTie.js","musicTimeModificationData.js","musicTimeSignature.js","musicTupletBracket.js","musicTuplet.js","musicXMLResultElement.js","analyzerElement.js","analyzerCell.js","analyzerCellData.js","analyzerDocument.js","analyzerElementReference.js","analyzerGroup.js","analyzerInkRange.js","analyzerLine.js","analyzerLineData.js","analyzerRecognizedStroke.js","analyzerResult.js","analyzerStrokeType.js","analyzerTable.js","analyzerTableData.js","analyzerTextLine.js","analyzerTextLineData.js","analyzerUnderline.js","analyzerUnderlineData.js","networkInterface.js","networkWSInterface.js","abstractRecognizer.js","abstractWSRecognizer.js","textRecognizer.js","textWSRecognizer.js","shapeRecognizer.js","mathRecognizer.js","mathWSRecognizer.js","musicRecognizer.js","analyzerRecognizer.js","abstractRenderer.js","textRenderer.js","shapeRenderer.js","mathRenderer.js","musicRenderer.js","analyzerRenderer.js","inkGrabber.js","inkPaper.js"],"names":["CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","window","Event","Function","bind","oThis","this","TypeError","aArgs","Array","slice","call","arguments","fToBind","fNOP","fBound","apply","concat","MyScript","RecognitionType","TEXT","MATH","SHAPE","MUSIC","ANALYZER","InputMode","CURSIVE","ISOLATED","SUPERIMPOSED","VERTICAL","InputType","CHAR","WORD","SINGLE_LINE_TEXT","MULTI_LINE_TEXT","ResultDetail","CHARACTER","ResultType","Math","LATEX","MATHML","SYMBOLTREE","Music","MUSICXML","SCORETREE","Protocol","WS","REST","scope","Point","obj","x","y","getX","setX","getY","setY","QuadraticPoint","pressure","distance","length","cos","sin","p1","p2","constructor","getPressure","setPressure","getDistance","setDistance","getLength","setLength","getCos","setCos","getSin","setSin","getP1","setP1","getP2","setP2","Rectangle","width","height","getTopLeftPoint","point","setTopLeftPoint","topLeftPoint","getWidth","setWidth","getHeight","setHeight","InkManager","writing","strokes","currentStroke","undoRedoStack","isWriting","getCurrentStroke","startInkCapture","t","Error","isRedoEmpty","clearUndoRedoStack","Stroke","addX","addY","addT","continueInkCapture","endInkCapture","push","clear","isEmpty","undo","pop","redo","getStrokes","getUndoRedoStack","copy","index","PenParameters","color","rectColor","font","decoration","pressureType","alpha","getColor","setColor","getRectColor","setRectColor","getFont","setFont","getDecoration","setDecoration","getPressureType","setPressureType","getAlpha","setAlpha","RenderingParameters","MathUtils","getEllipseArcRect","center","maxRadius","minRadius","orientation","startAngle","sweepAngle","angle","z1","z2","z3","z4","cosAlpha","sinAlpha","n","xList","yList","i","xMin","xMax","yMin","yMax","angleStep","sortFloat","a","b","abs","atan2","sort","getLineRect","firstPoint","lastPoint","xFirst","xLast","min","max","yFirst","yLast","getBoundingRect","boundingBoxes","rectangle","getComputedSlope","pA","pB","getSheathPoints","originPoint","slope","delta","sqrt","pow","AbstractWSMessage","type","getType","AbstractComponent","setType","getBoundingBox","setBoundingBox","boundingBox","getT","setT","StrokeComponent","p","d","l","toJSON","getP","setP","addP","getD","setD","addD","getL","setL","addL","addPoint","filterPointByAcquisitionDelta","computeP","computeD","computeL","getLastIndexPoint","getPointByIndex","isNaN","ratio","parseFloat","ret","CharacterInputComponent","alternates","getAlternates","setAlternates","addAlternate","alternate","CharacterInputComponentAlternate","probability","getAlternate","setAlternate","getProbability","setProbability","AbstractParameter","AbstractRecognitionInput","AbstractRecognitionData","getApplicationKey","applicationKey","setApplicationKey","getInstanceId","instanceId","setInstanceId","getHmac","hmac","setHmac","RecognitionLanguagesData","getInputMode","inputMode","setInputMode","AbstractStartRequestWSMessage","AbstractContinueRequestWSMessage","ChallengeRequestWSMessage","getChallenge","challenge","setChallenge","getHmacSignature","setHmacSignature","InitRequestWSMessage","ResetRequestWSMessage","AbstractTextInputComponent","CharInputComponent","getCharacter","character","setCharacter","getLabel","setLabel","label","StringInputComponent","getString","string","setString","TextInputUnit","textInputType","components","getInputType","setInputType","inputType","getComponents","inkRange","TextInkRange","getStartComponent","getEndComponent","setComponents","TextParameter","textProperties","TextProperties","getLanguage","language","setLanguage","textInputMode","getContentTypes","contentTypes","setContentTypes","getSubsetKnowledges","subsetKnowledges","setSubsetKnowledges","getUserResources","userResources","setUserResources","getUserLkWords","userLkWords","setUserLkWords","getResultDetail","resultDetail","setResultDetail","getTextProperties","setTextProperties","getTextCandidateListSize","textCandidateListSize","setTextCandidateListSize","getWordCandidateListSize","wordCandidateListSize","setWordCandidateListSize","getWordPredictionListSize","wordPredictionListSize","setWordPredictionListSize","getWordCompletionListSize","wordCompletionListSize","setWordCompletionListSize","getCharacterCandidateListSize","characterCandidateListSize","setCharacterCandidateListSize","getDiscardCaseVariations","discardCaseVariations","setDiscardCaseVariations","getDiscardAccentuationVariations","discardAccentuationVariations","setDiscardAccentuationVariations","getDisableSpatialOrdering","disableSpatialOrdering","setDisableSpatialOrdering","getGlyphDistortion","glyphDistortion","setGlyphDistortion","getEnableOutOfLexicon","enableOutOfLexicon","setEnableOutOfLexicon","getSpellingDistortion","spellingDistortion","setSpellingDistortion","TextRecognitionInput","getParameters","textParameter","setParameters","parameters","getInputUnits","inputUnits","getStartUnit","getEndUnit","setInputUnits","TextRecognitionData","getTextRecognitionInput","textInput","setTextRecognitionInput","input","JSON","stringify","TextStartRequestWSMessage","TextContinueRequestWSMessage","ShapeParameter","getRejectDetectionSensitivity","rejectDetectionSensitivity","setRejectDetectionSensitivity","hasBeautification","doBeautification","setBeautification","ShapeRecognitionInput","getDoBeautification","setDoBeautification","ShapeRecognitionData","getShapeRecognitionInput","shapeInput","setShapeRecognitionInput","MathParameter","resultTypes","getResultTypes","setResultTypes","isColumnar","columnarOperation","setColumnar","columnar","getScratchOutDetectionSensitivity","scratchOutDetectionSensitivity","setScratchOutDetectionSensitivity","MathRecognitionInput","MathRecognitionData","getMathRecognitionInput","mathInput","setMathRecognitionInput","MathStartRequestWSMessage","MathContinueRequestWSMessage","AbstractMusicInputComponent","MusicAccidentalInputComponent","getValue","value","setValue","MusicArpeggiateInputComponent","MusicBarInputComponent","MusicBar","MusicBeamInputComponent","MusicBeam","MusicClefInputComponent","MusicClef","MusicDecorationInputComponent","MusicDecoration","MusicDotsInputComponent","MusicHeadInputComponent","MusicLedgerLineInputComponent","MusicRestInputComponent","MusicStemInputComponent","MusicTieOrSlurInputComponent","MusicTimeSignatureInputComponent","MusicStaff","count","gap","getCount","setCount","getTop","top","setTop","getGap","setGap","MusicParameter","getStaff","staff","setStaff","getDivisions","divisions","setDivisions","MusicRecognitionInput","MusicRecognitionData","getMusicRecognitionInput","musicInput","setMusicRecognitionInput","AnalyzerParameter","getTextParameters","setTextParameters","getCoordinateResolution","coordinateResolution","setCoordinateResolution","AnalyzerRecognitionInput","parameter","AnalyzerRecognitionData","getAnalyzerRecognitionInput","analyzerInput","setAnalyzerRecognitionInput","AbstractResult","getDocument","result","AbstractRecoResponseWSMessage","ChallengeResponseWSMessage","ErrorResponseWSMessage","error","getError","InitResponseWSMessage","ResetResponseWSMessage","cpt","split","startUnit","Number","startComponent","startPoint","endUnit","endComponent","endPoint","getStartPoint","getEndPoint","TextCandidate","flags","children","normalizedScore","spellingDistortionRatio","j","TextSegment","getNormalizedScore","getResemblanceScore","resemblanceScore","getSpellingDistortionRatio","getFlags","getChildren","TextDocument","tagItems","wordCandidates","charCandidates","textSegmentResult","TextTagItem","k","getTagItems","getWordSegments","getWordSegment","inkRanges","getInkRanges","getCharSegments","getCharSegment","getTextSegment","hasScratchOutResults","TextResult","getTextDocument","candidates","selectedCandidateIdx","ranges","getCandidates","getSelectedCandidateIdx","getSelectedCandidate","tagType","getTagType","TextResponseWSMessage","AbstractShapePrimitive","beginDecoration","beginTangentAngle","endDecoration","endTangentAngle","isLine","isEllipse","hasBeginDecoration","hasEndDecoration","getBeginDecoration","getEndDecoration","getBeginTangentAngle","getEndTangentAngle","ShapeCandidate","isErased","isScratchOut","isNotRecognized","isRecognized","ShapeDocument","segments","ShapeSegment","getSegments","currentSeg","currentCandidate","ShapeScratchOut","ShapeEllipse","getCenter","getMinRadius","getMaxRadius","getOrientation","getStartAngle","getSweepAngle","ShapeErased","ShapeInkRange","firstStroke","lastStroke","getFirstStroke","getLastStroke","getFirstPoint","getLastPoint","ShapeLine","ShapeNotRecognized","ShapeRecognized","primitives","normalizedRecognitionScore","getPrimitives","getNormalizedRecognitionScore","ShapeResult","getShapeDocument","elementType","uniqueID","selectedCandidateIndex","getElementType","getUniqueId","MathNode","name","getName","MathNonTerminalNode","selectedCandidate","MathTerminalNode","MathRuleNode","MathCellNonTerminalNode","MathBorderNonTerminalNode","MathTableRuleNode","MathResultElement","isLaTex","isMathMl","isSymbolTree","childInkRanges","MathDocument","results","scratchOutResults","MathMathMLResultElement","MathLaTexResultElement","MathSymbolTreeResultElement","MathScratchOut","getResultElements","getScratchOutResults","MathInkRange","component","firstItem","lastItem","getComponent","getFirstItem","getLastItem","MathResult","getMathDocument","erasedInkRanges","getErasedInkRanges","root","getRoot","MathTerminalNodeCandidate","MathBorderData","position","start","stop","getPosition","getStart","getStop","data","getData","MathCellData","columnStart","columnStop","rowStart","rowStop","getColumnStart","getColumnStop","getRowStart","getRowStop","MathTableData","columnCount","rowCount","getColumnCount","getRowCount","MathResponseWSMessage","MusicElement","inputRanges","getInputRanges","MusicResultElement","isMusicXML","isScoreTree","MusicAccidental","MusicAnnotation","MusicArpeggiate","decorations","repeatDirection","style","getRepeatDirection","setRepeatDirection","getStyle","setStyle","getDecorations","setDecorations","placement","leftCount","rightCount","getSlope","setSlope","getPlacement","setPlacement","getLeftCount","setLeftCount","getRightCount","setRightCount","MusicChord","notes","beamTypes","ledgerLines","startSlurs","stopSlurs","duration","arpeggiate","startBeam","stopBeam","stem","MusicStem","MusicNote","MusicLedgerLine","m","MusicSlur","getDuration","getArpeggiate","getStartBeam","getStopBeam","getStem","getNotes","getBeamTypes","getLedgerLines","getStartSlurs","getStopSlurs","symbol","octave","line","yAnchor","getYAnchor","setYAnchor","getLine","setLine","getOctave","setOctave","getSymbol","setSymbol","MusicDocument","MusicXMLResultElement","MusicScoreTreeResultElement","MusicScratchOut","MusicDots","MusicHead","MusicInputRange","MusicKeySignature","accidentals","signature","MusicKeySignatureData","getSignature","getAccidentals","fifths","cancel","getFifths","getCancel","accidental","dots","head","pitch","MusicPitchData","startTie","MusicTie","stopTie","startTuplet","MusicTuplet","stopTuplet","timeModification","MusicTimeModificationData","getAccidental","getDots","getHead","getPitch","getStartTie","getStopTie","getStartTuplet","getStopTuplet","getTimeModification","MusicPart","elements","MusicRest","MusicTimeSignature","MusicTupletBracket","getElements","alteration","step","getAlteration","getStep","MusicResult","getMusicDocument","MusicScore","parts","getParts","score","getScore","erasedInputRanges","getErasedInputRanges","actual","normal","getActual","getNormal","bottom","getBottom","brackets","number","getNumber","getBrackets","AnalyzerElement","AnalyzerCell","AnalyzerCellData","firstColumn","lastColumn","firstRow","lastRow","topBorder","bottomBorder","leftBorder","rightBorder","getFirstColumn","getLastColumn","getFirstRow","getLastRow","hasTopBorder","hasBottomBorder","hasLeftBorder","hasRightBorder","AnalyzerDocument","textLines","shapes","tables","groups","AnalyzerTextLine","AnalyzerTable","AnalyzerGroup","getTextLines","getShapes","getTables","getGroups","AnalyzerElementReference","elementReferences","getElementReferences","AnalyzerInkRange","stroke","AnalyzerRecognizedStroke","getStroke","AnalyzerLine","AnalyzerLineData","AnalyzerResult","getAnalyzerDocument","AnalyzerStrokeType","getInkRange","lines","cells","AnalyzerTableData","getLines","getCells","underlineList","AnalyzerTextLineData","AnalyzerUnderline","getUnderlineList","baselinePos","toMidline","textHeight","justificationType","getBaselinePos","getToMidline","getTextHeight","getJustificationType","AnalyzerUnderlineData","firstCharacter","lastCharacter","getFirstCharacter","getLastCharacter","Q","NetworkInterface","parse","req","responseText","e","transformRequest","str","encodeURIComponent","join","xhr","url","onStateChange","request","readyState","status","deferred","resolve","onLoad","reject","onError","onProgress","notify","loaded","total","defer","XMLHttpRequest","open","withCredentials","setRequestHeader","onload","onerror","onprogress","onreadystatechange","send","promise","get","src","then","response","put","post","NetworkWSInterface","callback","_url","_callback","_socket","isClosed","isClosing","isOpen","isConnecting","close","code","reason","self","WebSocket","onopen","onclose","onmessage","CryptoJS","AbstractRecognizer","host","setHost","http","getHost","getAvailableLanguageList","computeHmac","hmacKey","jsonInput","HmacSHA512","toString","enc","Hex","AbstractWSRecognizer","_init","endpoint","_wsInterface","sendMessage","message","initWSRecognition","takeUpHmacChallenge","resetWSRecognition","TextRecognizer","doSimpleRecognition","TextWSRecognizer","_endpoint","startWSRecognition","continueWSRecognition","ShapeRecognizer","clearShapeRecognitionSession","instanceSessionId","MathRecognizer","MathWSRecognizer","MusicRecognizer","AnalyzerRecognizer","AbstractRenderer","context","penParameters","showBoundingBoxes","typeset","points","drawing","_computeLinksPoints","radius","_computeMiddlePoint","point1","point2","_computeAxeAngle","begin","end","_fill","globalAlpha","fillStyle","fill","_renderStroke","beginPath","arc","PI","_renderLine","nbquadratics","_renderQuadratic","_renderFinal","closePath","ARCSPLIT","linkPoints","moveTo","newAngle","lineTo","linkPoints1","linkPoints2","ctrl","linkPoints3","quadraticCurveTo","getContext","_setContext","getShowBoundingBoxes","setShowBoundingBoxes","isTypesetting","setTypeset","clearRect","canvas","drawRecognitionResult","recognitionResult","drawComponents","drawComponent","drawStroke","drawCharacter","drawRectangle","save","strokeStyle","lineWidth","fillRect","restore","drawStart","drawContinue","drawEnd","drawStrokes","last","pAB","_computePointParameters","_computeFirstControls","_computeControls","_drawFirstSegment","pC","pBC","_drawSegment","_drawPoint","_computeLastControls","_drawLastSegment","previous","dx","dy","_computePressure","first","next","penWidth","r","nx","ny","u","TextRenderer","drawInputUnits","drawTextComponent","_drawChar","_drawString","char","ShapeRenderer","drawShapes","drawShapePrimitive","drawShapeSegment","segment","candidate","drawShapeRecognized","drawShapeNotRecognized","shapeRecognized","notRecognized","extractStroke","primitive","drawShapeEllipse","drawShapeLine","shapeLine","_drawLine","_drawArrowHead","shapeEllipse","_drawEllipseArc","centerPoint","floor","boundariesPoints","_phi","headPoint","beta","firstPointIndex","lastPointIndex","ceil","strokeIndex","currentStrokePointCount","newStroke","pointIndex","MathRenderer","notScratchOutComponents","removeScratchOut","cloneComponents","componentsToRemove","z","splice","MusicRenderer","drawStaff","staffHeight","staves","offset","clientWidth","drawMusicNode","_drawAccidental","_drawArpeggiate","_drawBar","_drawBeam","_drawClef","_drawDecoration","_drawDots","_drawHead","_drawLedgerLine","_drawRest","_drawStem","_drawTieOrSlur","_drawTimeSignature","bar","beam","clef","imageObj","Image","drawImage","ledgerLine","rest","tieOrSlur","timeSignature","AnalyzerRenderer","shapeRenderer","getShapeRenderer","setShapeRenderer","drawTables","drawTextLines","drawCell","textLine","text","drawText","underlines","drawUnderline","baseline","textAlign","fillText","underline","topLeft","textMetrics","measureText","substring","x1","x2","drawGroups","cell","InkGrabber","startCapture","continueCapture","endCapture","InkPaper","element","options","_element","_instanceId","_timerId","_initialized","redoComponents","lastNonRecoComponentIdx","resultCallback","changeCallback","protocol","timeout","textParameters","mathParameters","shapeParameters","musicParameters","analyzerParameters","_captureCanvas","_createCanvas","_inkGrabber","_renderingCanvas","_textRenderer","_mathRenderer","_shapeRenderer","_musicRenderer","_analyzerRenderer","_textRecognizer","_mathRecognizer","_shapeRecognizer","_musicRecognizer","_analyzerRecognizer","_textWSRecognizer","_handleMessage","_mathWSRecognizer","_attachListeners","idx","_initialize","_getOptions","parent","id","querySelectorAll","createElement","appendChild","_getCoordinates","container","changedTouches","rect","getBoundingClientRect","clientX","left","clientLeft","clientY","clientTop","timeStamp","_initRenderingCanvas","setProtocol","_selectedRecognizer","_selectedRESTRecognizer","setTimeout","_selectedWSRecognizer","getProtocol","_selectedRenderer","getTimeout","getHmacKey","setHmacKey","isStarted","map","toUpperCase","setMathParameters","getMathParameters","setShapeParameters","getShapeParameters","setMusicParameters","getMusicParameters","setAnalyzerParameters","getAnalyzerParameters","setPenParameters","getPenParameters","_setHost","getAvailableLanguages","getRenderer","getInkGrabber","getRecognizer","setCallback","setChangeCallback","setResultCallback","recognize","_doRecognition","canUndo","_onChange","canRedo","clearTimeout","_onResult","addDomListener","useCapture","myfunction","addEventListener","_down","clientHeight","_move","_up","inputWS","inputUnitWS","inputUnit","_parseResult","done","err","dispatchEvent","changes","pointerId","preventDefault","coord","console","log","_drawInput","replayNeeded"],"mappings":"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","file":"myscript.min.js","sourcesContent":["/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n\n\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Complex Point object used for quadratic calculation\n     *\n     * @deprecated\n     * @class QuadraticPoint\n     * @extends Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function QuadraticPoint(obj) {\n        scope.Point.call(this, obj);\n        this.pressure = 0.5;\n        this.distance = 0.0;\n        this.length = 0.0;\n        this.cos = 0.0;\n        this.sin = 0.0;\n        this.p1 = new scope.Point(obj);\n        this.p2 = new scope.Point(obj);\n        if (obj) {\n            this.pressure = obj.pressure;\n            this.distance = obj.distance;\n            this.length = obj.length;\n            this.cos = obj.cos;\n            this.sin = obj.sin;\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    QuadraticPoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    QuadraticPoint.prototype.constructor = QuadraticPoint;\n\n    /**\n     * Get pressure\n     *\n     * @method getPressure\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getPressure = function () {\n        return this.pressure;\n    };\n\n    /**\n     * Set pressure\n     *\n     * @method setPressure\n     * @param {Number} pressure\n     */\n    QuadraticPoint.prototype.setPressure = function (pressure) {\n        this.pressure = pressure;\n    };\n\n    /**\n     * Get distance\n     *\n     * @method getDistance\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getDistance = function () {\n        return this.distance;\n    };\n\n    /**\n     * Set distance\n     *\n     * @method setDistance\n     * @param {Number} distance\n     */\n    QuadraticPoint.prototype.setDistance = function (distance) {\n        this.distance = distance;\n    };\n\n    /**\n     * Get length\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getLength = function () {\n        return this.length;\n    };\n\n    /**\n     * Set length\n     *\n     * @method setLength\n     * @param {Number} length\n     */\n    QuadraticPoint.prototype.setLength = function (length) {\n        this.length = length;\n    };\n\n    /**\n     * Get cos\n     *\n     * @method getCos\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getCos = function () {\n        return this.cos;\n    };\n\n    /**\n     * Set cos\n     *\n     * @method setCos\n     * @param {Number} cos\n     */\n    QuadraticPoint.prototype.setCos = function (cos) {\n        this.cos = cos;\n    };\n\n    /**\n     * Get sin\n     *\n     * @method getSin\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getSin = function () {\n        return this.sin;\n    };\n\n    /**\n     * Set sin\n     *\n     * @method setSin\n     * @param {Number} sin\n     */\n    QuadraticPoint.prototype.setSin = function (sin) {\n        this.sin = sin;\n    };\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Set p1\n     *\n     * @method setP1\n     * @param {Point} p1\n     */\n    QuadraticPoint.prototype.setP1 = function (p1) {\n        this.p1 = p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    /**\n     * Set p2\n     *\n     * @method setP2\n     * @param {Point} p2\n     */\n    QuadraticPoint.prototype.setP2 = function (p2) {\n        this.p2 = p2;\n    };\n\n    // Export\n    scope.QuadraticPoint = QuadraticPoint;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * The InkManager class that can use to store writing strokes and manage the undo/redo/clear system\n     *\n     * @deprecated\n     * @class InkManager\n     * @constructor\n     */\n    function InkManager() {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    }\n\n    /**\n     * Is Writing a stroke\n     *\n     * @deprecated\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last current Stroke write\n     *\n     * @deprecated\n     * @method getCurrentStroke\n     * @returns {Stroke}\n     */\n    InkManager.prototype.getCurrentStroke = function () {\n        return this.currentStroke;\n    };\n\n    /**\n     * Start ink capture\n     *\n     * @deprecated\n     * @method startInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.startInkCapture = function (x, y, t) {\n        if (!this.writing) {\n            if (!this.isRedoEmpty()) {\n                this.clearUndoRedoStack();\n            }\n            this.currentStroke = new scope.Stroke();\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n            this.writing = true;\n        } else {\n            throw new Error('Stroke capture already running');\n        }\n    };\n\n    /**\n     * Continue ink capture\n     *\n     * @deprecated\n     * @method continueInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.continueInkCapture = function (x, y, t) {\n        if (this.writing) {\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * End ink capture\n     *\n     * @deprecated\n     * @method endInkCapture\n     */\n    InkManager.prototype.endInkCapture = function () {\n        if (this.writing) {\n            this.strokes.push(this.currentStroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * Clear the strokes list\n     *\n     * @deprecated\n     * @method clear\n     */\n    InkManager.prototype.clear = function () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Is The Strokes list is empty\n     *\n     * @deprecated\n     * @method isEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isEmpty = function () {\n        return this.strokes.length === 0;\n    };\n\n    /**\n     * Is the Undo/Redo Stack empty\n     *\n     * @method isRedoEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isRedoEmpty = function () {\n        return this.undoRedoStack.length === 0;\n    };\n\n    /**\n     * Make an undo\n     *\n     * @deprecated\n     * @method undo\n     */\n    InkManager.prototype.undo = function () {\n        if (!this.isEmpty()) {\n            this.undoRedoStack.push(this.strokes.pop());\n        }\n    };\n\n    /**\n     * Make a redo\n     *\n     * @deprecated\n     * @method redo\n     */\n    InkManager.prototype.redo = function () {\n        if (!this.isRedoEmpty()) {\n            this.strokes.push(this.undoRedoStack.pop());\n        }\n    };\n\n    /**\n     * Get the strokes list\n     *\n     * @deprecated\n     * @method getStokes\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getStrokes = function () {\n        return this.strokes;\n    };\n\n    /**\n     * Get the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method getUndoRedoStack\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getUndoRedoStack = function () {\n        return this.undoRedoStack;\n    };\n\n    /**\n     * Clear the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method clearUndoRedoStack\n     */\n    InkManager.prototype.clearUndoRedoStack = function () {\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Copy the strokes values from index on an other list of strokes\n     *\n     * @deprecated\n     * @method copy\n     * @param {Stroke[]} strokes List of strokes\n     * @param {Number} index Position to start the copy\n     */\n    InkManager.prototype.copy = function (strokes, index) {\n        for (index; index < this.strokes.length; index++) {\n            strokes.push(this.strokes[index]);\n        }\n    };\n\n    // Export\n    scope.InkManager = InkManager;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw. Default values:\n     * color: 'black';\n     * rectColor: 'rgba(0, 0, 0, 0.2)';\n     * font: 'Times New Roman';\n     * decoration: '';\n     * width: 4;\n     * pressureType: 'SIMULATED';\n     * alpha: '1.0';\n     * showBoundingBoxes: false;\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters() {\n        this.color = 'black';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = '';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get the pressure renderer parameter\n     *\n     * @method getPressureType\n     * @returns {String} The pressure type\n     */\n    PenParameters.prototype.getPressureType = function () {\n        return this.pressureType;\n    };\n\n    /**\n     * Set the pressure renderer parameter\n     *\n     * @method setPressureType\n     * @param {String} pressureType\n     */\n    PenParameters.prototype.setPressureType = function (pressureType) {\n        this.pressureType = pressureType;\n    };\n\n    /**\n     * Get the alpha renderer parameter\n     *\n     * @method getAlpha\n     * @returns {String} The alpha\n     */\n    PenParameters.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * Set the alpha renderer parameter\n     *\n     * @method setAlpha\n     * @param {String} alpha\n     */\n    PenParameters.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @deprecated Use 'PenParameters' instead\n     * @class RenderingParameters\n     * @constructor\n     */\n    function RenderingParameters() {\n        scope.PenParameters.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    RenderingParameters.prototype = new scope.PenParameters();\n\n    /**\n     * Constructor property\n     */\n    RenderingParameters.prototype.constructor = RenderingParameters;\n\n    // Export\n    scope.RenderingParameters = RenderingParameters;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the slope.\n     *\n     * @method getComputedSlope\n     * @param {Point} pA Point A\n     * @param {Point} pB Point B\n     * @returns {Number}\n     */\n    MathUtils.getComputedSlope = function (pA, pB) {\n        return (pB.getY() - pA.getY()) / (pB.getX() - pA.getX());\n    };\n\n    /**\n     * This method is use to calculate the sheath points.\n     *\n     * @method getSheathPoints\n     * @param {Point} originPoint Origin point\n     * @param {Number} slope Slope\n     * @param {Number} delta Delta\n     * @returns {Object}\n     */\n    MathUtils.getSheathPoints = function (originPoint, slope, delta) {\n        var x = Math.sqrt(Math.pow(delta, 2) / (1 + 1 / (Math.pow(slope, 2))));\n        var y = -(1/slope) * x;\n        return {\n            p1: new scope.Point({x: x + originPoint.getX(), y: y + originPoint.getY()}),\n            p2: new scope.Point({x: -x + originPoint.getX(), y: -y + originPoint.getY()})\n        };\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @deprecated Use StrokeComponent instead\n     * @class Stroke\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function Stroke(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.t = obj.t;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    Stroke.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    Stroke.prototype.constructor = Stroke;\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    Stroke.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    Stroke.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    Stroke.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    Stroke.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    Stroke.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    Stroke.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    Stroke.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    Stroke.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    // Export\n    scope.Stroke = Stroke;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @class StrokeComponent\n     * @extends Stroke\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.Stroke.call(this);\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            this.p = obj.p;\n            this.d = obj.p;\n            this.l = obj.l;\n            this.color = obj.color;\n            this.alpha = obj.alpha;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.Stroke();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**     *\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    StrokeComponent.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    StrokeComponent.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (this.filterPointByAcquisitionDelta(x, y)) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(this.computeP(x, y));\n            this.addD(this.computeD(x, y));\n            this.addL(this.computeL(x, y));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    StrokeComponent.prototype.computeD = function (x, y) {\n        var distance = Math.sqrt(Math.pow((y - this.getY()[this.getLastIndexPoint() - 1]), 2) + Math.pow((x - this.getX()[this.getLastIndexPoint() - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    };\n\n    StrokeComponent.prototype.computeL = function (x, y) {\n        var length = this.getL()[this.getLastIndexPoint() - 1] + this.computeD(x, y);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    };\n\n    StrokeComponent.prototype.computeP = function (x, y) {\n        var ratio = 1.0;\n        var distance = this.computeD(x, y);\n        var length = this.computeL(x, y);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    };\n\n    StrokeComponent.prototype.filterPointByAcquisitionDelta = function (x, y) {\n        var delta = (2 + (this.getWidth() / 4));\n        var ret = false;\n        if (this.getLength() === 0 || Math.abs(this.getX()[this.getLastIndexPoint()] - x) >= delta || Math.abs(this.getY()[this.getLastIndexPoint()] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    };\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent() {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(alternate, probability) {\n        this.alternate = alternate;\n        this.probability = probability;\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent() {\n        scope.AbstractComponent.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent() {\n        this.type = 'char';\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get character\n     *\n     * @deprecated Use 'getLabel'\n     * @method getCharacter\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getCharacter = function () {\n        return this.character;\n    };\n\n    /**\n     * Set character\n     *\n     * @deprecated Use 'setLabel'\n     * @method setCharacter\n     * @param {String} character\n     */\n    CharInputComponent.prototype.setCharacter = function (character) {\n        this.character = character;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent() {\n        this.type = 'string';\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get string\n     *\n     * @deprecated Use 'getLabel'\n     * @method getString\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getString = function () {\n        return this.string;\n    };\n\n    /**\n     * Set string\n     *\n     * @deprecated Use 'setLabel'\n     * @method setString\n     * @param {String} string\n     */\n    StringInputComponent.prototype.setString = function (string) {\n        this.string = string;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties() {\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @method getTextRecognitionInput\n     * @returns {TextRecognitionInput} inputMode\n     */\n    TextRecognitionData.prototype.getTextRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setTextRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setTextRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method getDoBeautification\n     * @returns {Boolean}\n     */\n    ShapeRecognitionInput.prototype.getDoBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setDoBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeRecognitionInput.prototype.setDoBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Number}\n     */\n    ShapeRecognitionInput.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Number} rejectDetectionSensitivity\n     */\n    ShapeRecognitionInput.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @method getShapeRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getShapeRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setShapeRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setShapeRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathRecognitionInput.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathRecognitionInput.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n    /**\n     * Get math input\n     *\n     * @method getMathRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getMathRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setMathRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setMathRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent() {\n        scope.AbstractComponent.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent() {\n        this.type = 'accidental';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent() {\n        this.type = 'arpeggiate';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent() {\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent() {\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent() {\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent() {\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent() {\n        this.type = 'dots';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent() {\n        this.type = 'head';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent() {\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent() {\n        this.type = 'rest';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent() {\n        this.type = 'stem';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent() {\n        this.type = 'tieOrSlur';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent() {\n        this.type = 'timeSignature';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff() {\n        this.count = 5;\n        this.gap = 20;\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the result types\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the result types\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicRecognitionInput.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRecognitionInput.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicRecognitionInput.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @method getMusicRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getMusicRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setMusicRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setMusicRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @method getAnalyzerRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getAnalyzerRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setAnalyzerRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setAnalyzerRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            var cpt = obj.split(/[:-]+/);\n            this.startUnit = Number(cpt[0]);\n            this.startComponent = Number(cpt[1]);\n            this.startPoint = Number(cpt[2]);\n            this.endUnit = Number(cpt[3]);\n            this.endComponent = Number(cpt[4]);\n            this.endPoint = Number(cpt[5]);\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResult.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges.split(/[\\s]+/);\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges.split(/[\\s]+/);\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResponseWSMessage.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    /**\n     * Get shape document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getShapeDocument\n     * @returns {ShapeDocument}\n     */\n    ShapeResult.prototype.getShapeDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);\n(function (scope) {\n    \n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResult.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResponseWSMessage.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    /**\n     * Get music document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMusicDocument\n     * @returns {MusicDocument}\n     */\n    MusicResult.prototype.getMusicDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    /**\n     * Get analyzer document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getAnalyzerDocument\n     * @returns {AnalyzerDocument}\n     */\n    AnalyzerResult.prototype.getAnalyzerDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);\n\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.xhr = function (type, url, data) {\n\n        var deferred = Q.defer();\n\n        function onStateChange() {\n            if (request.readyState === 4) {\n                if (request.status >= 200 && request.status < 300) {\n                    deferred.resolve(NetworkInterface.parse(request));\n                }\n            }\n        }\n\n        function onLoad() {\n            if (request.status >= 200 && request.status < 300) {\n                deferred.resolve(NetworkInterface.parse(request));\n            } else {\n                deferred.reject(new Error(request.responseText));\n            }\n        }\n\n        function onError() {\n            deferred.reject(new Error('Can\\'t XHR ' + url));\n        }\n\n        function onProgress(event) {\n            deferred.notify(event.loaded / event.total);\n        }\n\n        var request = new XMLHttpRequest();\n        request.open(type, url, true);\n        request.withCredentials = true;\n        request.setRequestHeader('Accept', 'application/json');\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        request.onload = onLoad;\n        request.onerror = onError;\n        request.onprogress = onProgress;\n        request.onreadystatechange = onStateChange;\n        request.send(NetworkInterface.transformRequest(data));\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return this.xhr('GET', src).then(\n            function success(response) {\n                return response;\n            }, function error(response) {\n                throw response;\n            });\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} src\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.put = function (url, data) {\n        return this.xhr('PUT', url, data).then(\n            function success(response) {\n                return response;\n            }, function error(response) {\n                throw response;\n            });\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} src\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.post = function (url, data) {\n        return this.xhr('POST', url, data).then(\n            function success(response) {\n                return response;\n            }, function error(response) {\n                throw response;\n            });\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} src\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.delete = function (url, data) {\n        return this.xhr('DELETE', url, data).then(\n            function success(response) {\n                return response;\n            }, function error(response) {\n                throw response;\n            });\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n\n\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface(url, callback) {\n        this._url = url;\n        this._callback = callback;\n    }\n\n    NetworkWSInterface.prototype.send = function (request) {\n        if (this._socket) {\n            this._socket.send(JSON.stringify(request));\n        }\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        if (this._socket) {\n            return this._socket.readyState === 3;\n        }\n        return false;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        if (this._socket) {\n            return this._socket.readyState === 2;\n        }\n        return false;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        if (this._socket) {\n            return this._socket.readyState === 1;\n        }\n        return false;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        if (this._socket) {\n            return this._socket.readyState === 0;\n        }\n        return false;\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this._socket) {\n            this._socket.close(code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        var self = this;\n        this._socket = new WebSocket(this._url);\n\n        this._socket.onopen = function (e) {\n            self._callback(e);\n        };\n        this._socket.onclose = function (e) {\n            self._callback(e);\n        };\n        this._socket.onerror = function (e) {\n            self._callback(e);\n        };\n\n        this._socket.onmessage = function (e) {\n            self._callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        };\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n\n\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.host = 'cloud.myscript.com';\n        if (host) {\n            this.setHost(host);\n        }\n        this.http = new scope.NetworkInterface();\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return this.host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.host = host;\n        }\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return this.http.get('https://' + this.host + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @method computeHmac\n     * @param {String} applicationKey\n     * @param {String} data\n     * @param {String} hmacKey\n     */\n    AbstractRecognizer.prototype.computeHmac = function (applicationKey, data, hmacKey) {\n        var jsonInput = (typeof data === 'object') ? JSON.stringify(data) : data;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);\n\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractWSRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractWSRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AbstractWSRecognizer.prototype.constructor = AbstractWSRecognizer;\n\n    AbstractWSRecognizer.prototype._init = function (endpoint, callback) {\n        this._wsInterface = new scope.NetworkWSInterface(endpoint, callback);\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(this.computeHmac(applicationKey, challenge, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, inputUnits, hmacKey, parameters) {\n        var input = new scope.TextRecognitionInput();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n\n        var data = new scope.TextRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setTextRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this, host);\n        this._endpoint = 'wss://' + this.getHost() + '/api/v3.0/recognition/ws/text';\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this._init(this._endpoint, function (message) {\n            switch (message.type) {\n                case 'open':\n                    callback(message);\n                    break;\n                case 'close':\n                    callback(message);\n                    break;\n                case 'error':\n                    callback(undefined, message);\n                    break;\n                default:\n                    switch (message.data.type) {\n                        case 'init':\n                            message.data = new scope.InitResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        case 'reset':\n                            message.data = new scope.ResetResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        case 'error':\n                            message.data = new scope.ErrorResponseWSMessage(message.data);\n                            callback(undefined, message.data);\n                            break;\n                        case 'hmacChallenge':\n                            message.data = new scope.ChallengeResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        default:\n                            message.data = new scope.TextResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                    }\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (inputUnits, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {ShapeParameter}\n     */\n    ShapeRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {ShapeParameter} parameters\n     */\n    ShapeRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.ShapeRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setDoBeautification(params.hasBeautification());\n        input.setRejectDetectionSensitivity(params.getRejectDetectionSensitivity());\n\n        var data = new scope.ShapeRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setShapeRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return response;\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.MathRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setResultTypes(params.getResultTypes());\n        input.setColumnar(params.isColumnar());\n        input.setScratchOutDetectionSensitivity(params.getScratchOutDetectionSensitivity());\n        input.setUserResources(params.getUserResources());\n\n        var data = new scope.MathRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setMathRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this, host);\n        this._endpoint = 'wss://' + this.getHost() + '/api/v3.0/recognition/ws/math';\n        this.parameters = new scope.MathParameter();\n        this._init(this._endpoint, function (message) {\n            switch (message.type) {\n                case 'open':\n                    callback(message);\n                    break;\n                case 'close':\n                    callback(message);\n                    break;\n                case 'error':\n                    callback(undefined, message);\n                    break;\n                default:\n                    switch (message.data.type) {\n                        case 'init':\n                            message.data = new scope.InitResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        case 'reset':\n                            message.data = new scope.ResetResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        case 'error':\n                            message.data = new scope.ErrorResponseWSMessage(message.data);\n                            callback(undefined, message.data);\n                            break;\n                        case 'hmacChallenge':\n                            message.data = new scope.ChallengeResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        default:\n                            message.data = new scope.MathResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                    }\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MusicParameter}\n     */\n    MusicRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MusicParameter} parameters\n     */\n    MusicRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.MusicRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setStaff(params.getStaff());\n        input.setDivisions(params.getDivisions());\n        input.setResultTypes(params.getResultTypes());\n        input.setScratchOutDetectionSensitivity(params.getScratchOutDetectionSensitivity());\n        input.setUserResources(params.getUserResources());\n\n        var data = new scope.MusicRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setMusicRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setParameters(params);\n\n        var data = new scope.AnalyzerRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setAnalyzerRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * Set the context (legacy code for non-regression)\n     *\n     * @private\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype._setContext = function (context) {\n        this.context = context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponents = function (components, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponent = function (component, context, parameters) {\n        if (component instanceof scope.Stroke) {\n            this.drawStroke(component, context, parameters);\n        } else if (component instanceof scope.CharacterInputComponent) {\n            this.drawCharacter(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {Rectangle} rectangle\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var params = this.getParameters();\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getRectColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().globalAlpha = params.getAlpha();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawCharacter = function (character, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method drawStroke\n     * @param {Stroke} stroke\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (stroke && stroke.getLength() > 0) {\n            if (stroke instanceof scope.StrokeComponent) {\n                _renderStroke(stroke, this.getContext());\n            } else {\n                this.drawStart(stroke.getX()[0], stroke.getY()[0]);\n                for (var i = 0; i < stroke.getLength(); ++i) {\n                    this.drawContinue(stroke.getX()[i], stroke.getY()[i], context, parameters);\n                }\n                this.drawEnd(stroke.getX()[stroke.getLength() - 1], stroke.getY()[stroke.getLength() - 1], context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw stroke components\n     *\n     * @private\n     * @method drawStrokes\n     * @param {Stroke[]} strokes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes, context, parameters) {\n        for(var i = 0; i < strokes.length;i++){\n            this.drawStroke(strokes[i], context, parameters);\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x : (point.x - Math.sin(angle) * radius),\n            y : (point.y + Math.cos(angle) * radius)\n        }, {\n            x : (point.x + Math.sin(angle) * radius),\n            y : (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x : ((point2.x + point1.x) / 2),\n            y : ((point2.y + point1.y) / 2),\n            p : ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color, alpha) {\n        if (color !== undefined) {\n            context.globalAlpha = alpha;\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3){\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++){\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor(), stroke.getAlpha());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    /**\n     * DEPRECATED METHODS\n     */\n\n    /**\n     * Record the beginning of drawing\n     *\n     * @deprecated\n     * @method drawStart\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStart = function (x, y, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        this.points = [];\n        this.drawing = true;\n        this.points.push(new scope.QuadraticPoint({x: x, y: y}));\n    };\n\n    /**\n     * Record the drawing\n     *\n     * @deprecated\n     * @method drawContinue\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawContinue = function (x, y, context, parameters) {\n        if (this.drawing) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            var params = this.getParameters();\n            var delta = 2 + (params.getWidth() / 4);\n            var last = this.points[this.points.length - 1];\n\n            if (Math.abs(last.getX() - x) >= delta || Math.abs(last.getY() - y) >= delta) {\n\n                if (this.points.length === 1) { // firstPoint\n\n                    var pA = this.points[this.points.length - 1]; // firstPoint\n                    var pB = new scope.QuadraticPoint({x: x, y: y});\n                    var pAB = new scope.QuadraticPoint({\n                        x: 0.5 * (pA.getX() + pB.getX()),\n                        y: 0.5 * (pA.getY() + pB.getY())\n                    });\n                    _computePointParameters(pA, pAB, params.getPressureType());\n                    _computePointParameters(pAB, pB, params.getPressureType());\n\n                    _computeFirstControls(pA, pAB, params.getWidth());\n                    _computeControls(pAB, pB, params.getWidth());\n\n                    this.points.push(pAB);\n                    this.points.push(pB);\n\n                    _drawFirstSegment(pA, pAB, this.getContext(), params);\n\n                } else {\n                    var pAB = this.points[this.points.length - 2]; // jshint ignore:line\n                    var pB = this.points[this.points.length - 1]; // jshint ignore:line\n                    var pC = new scope.QuadraticPoint({x: x, y: y});\n                    var pBC = new scope.QuadraticPoint({\n                        x: 0.5 * (pB.getX() + pC.getX()),\n                        y: 0.5 * (pB.getY() + pC.getY())\n                    });\n                    _computePointParameters(pB, pBC, params.getPressureType());\n                    _computePointParameters(pBC, pC, params.getPressureType());\n\n                    _computeControls(pB, pBC, params.getWidth());\n                    _computeControls(pBC, pC, params.getWidth());\n\n                    this.points.push(pBC);\n                    this.points.push(pC);\n\n                    _drawSegment(pAB, pB, pBC, this.getContext(), params);\n                }\n            }\n        }\n    };\n\n    /**\n     * Stop record of drawing\n     *\n     * @deprecated\n     * @method drawEnd\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawEnd = function (x, y, context, parameters) {\n        if (this.drawing) {\n            var params = this.getParameters();\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            if (this.points.length === 1) {\n                _drawPoint(new scope.QuadraticPoint({x: x, y: y}), this.getContext(), params);\n            } else if (this.points.length > 1) {\n                var pA = this.points[this.points.length - 1];\n                var pB = new scope.QuadraticPoint({x: x, y: y});\n                var pAB = new scope.QuadraticPoint({\n                    x: 0.5 * (pA.getX() + pB.getX()),\n                    y: 0.5 * (pA.getY() + pB.getY())\n                });\n                _computePointParameters(pA, pAB, params.getPressureType());\n                _computePointParameters(pAB, pB, params.getPressureType());\n\n                _computeControls(pA, pAB, params.getWidth());\n                _computeLastControls(pB, params.getWidth());\n\n                this.points.push(pAB);\n                this.points.push(pB);\n\n                _drawLastSegment(pAB, pB, this.getContext(), params);\n            }\n            this.drawing = false;\n        }\n    };\n\n    /**\n     * Draw point on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawPoint\n     * @param {QuadraticPoint} point\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawPoint = function (point, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.arc(point.getX(), point.getY(), 0.25 * parameters.getWidth(), 0, 2 * Math.PI);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw the first stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawFirstSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawFirstSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw middle stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {QuadraticPoint} pC\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawSegment = function (pA, pB, pC, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.quadraticCurveTo(pB.getP1().getX(), pB.getP1().getY(), pC.getP1().getX(), pC.getP1().getY());\n            context.lineTo(pC.getP2().getX(), pC.getP2().getY());\n            context.quadraticCurveTo(pB.getP2().getX(), pB.getP2().getY(), pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw the last stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawLastSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLastSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Compute distance and unit vector from the previous point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePointParameters\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     * @param {String} pressureType\n     */\n    var _computePointParameters = function (previous, point, pressureType) {\n        var dx = point.getX() - previous.getX(),\n            dy = point.getY() - previous.getY(),\n            d = Math.sqrt((dx * dx) + (dy * dy));\n\n        if (d !== 0) {\n            point.setDistance(d);\n            point.setCos(dx / d);\n            point.setSin(dy / d);\n        }\n        point.setLength(previous.getLength() + point.getDistance());\n\n        switch (pressureType) {\n            case 'SIMULATED':\n                _computePressure(point);\n                break;\n            case 'CONSTANT':\n                point.setPressure(1.0);\n                break;\n            case 'REAL':\n                // keep the current pressure\n                break;\n            default:\n                throw new Error('Unknown pressure type');\n        }\n    };\n\n    /**\n     * Compute simulated pressure of given point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePressure\n     * @param {QuadraticPoint} point\n     */\n    var _computePressure = function (point) {\n        var k, pressure;\n        if (point.getDistance() < 10) {\n            k = 0.2 + Math.pow(0.1 * point.getDistance(), 0.4);\n        } else if (point.getDistance() > point.getLength() - 10) {\n            k = 0.2 + Math.pow(0.1 * (point.getLength() - point.getDistance()), 0.4);\n        } else {\n            k = 1.0;\n        }\n\n        pressure = k * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(point.getDistance()));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        point.setPressure(pressure);\n    };\n\n    /**\n     * Compute control points of the first point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeFirstControls\n     * @param {QuadraticPoint} first First point of the list to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeFirstControls = function (first, next, penWidth) {\n        var r = 0.5 * (penWidth * first.getPressure()),\n            nx = r * next.getSin(),\n            ny = r * next.getCos();\n\n        first.getP1().setX(first.getX() - nx);\n        first.getP1().setY(first.getY() + ny);\n        first.getP2().setX(first.getX() + nx);\n        first.getP2().setY(first.getY() - ny);\n    };\n\n    /**\n     * Compute control points between two points.\n     *\n     * @private\n     * @deprecated\n     * @method _computeControls\n     * @param {QuadraticPoint} point Point to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeControls = function (point, next, penWidth) {\n        var cos = point.getCos() + next.getCos(),\n            sin = point.getSin() + next.getSin(),\n            u = Math.sqrt((cos * cos) + (sin * sin));\n\n        if (u !== 0) {\n            // compute control points\n            var r = 0.5 * penWidth * point.getPressure();\n            var nx = -r * sin / u;\n            var ny = r * cos / u;\n            point.getP1().setX(point.getX() + nx);\n            point.getP1().setY(point.getY() + ny);\n            point.getP2().setX(point.getX() - nx);\n            point.getP2().setY(point.getY() - ny);\n        }\n    };\n\n    /**\n     * Compute control points of the last point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeLastControls\n     * @param {QuadraticPoint} last Last point to be computed\n     * @param {Number} penWidth Pen width\n     */\n    var _computeLastControls = function (last, penWidth) {\n        var r = 0.5 * penWidth * last.getPressure(),\n            nx = -r * last.getSin(),\n            ny = r * last.getCos();\n\n        last.getP1().setX(last.getX() + nx);\n        last.getP1().setY(last.getY() + ny);\n        last.getP2().setX(last.getX() - nx);\n        last.getP2().setY(last.getY() - ny);\n    };\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (inputUnits, recognitionResult, context, parameters) {\n        this.drawInputUnits(inputUnits, context, parameters);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits, context, parameters) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents(), context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractTextInputComponent) {\n                this.drawTextComponent(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @method drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawTextComponent = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, this.getContext(), this.getParameters());\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (this.isTypesetting()) {\n            this.drawShapes(components, recognitionResult.getSegments(), context, parameters);\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.drawShapePrimitive(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes, context, parameters) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment, context, parameters) {\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            this.drawShapeRecognized(candidate, context, parameters);\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            this.drawShapeNotRecognized(components, segment.getInkRanges(), context, parameters);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        this.drawComponents(shapeRecognized.getPrimitives(), context, parameters);\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges, context, parameters) {\n        var notRecognized = [];\n        for (var i in inkRanges) {\n            notRecognized.concat(this.extractStroke(components, inkRanges[i]));\n        }\n        this.drawComponents(notRecognized, context, parameters);\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            this.drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            this.drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeLine = function (shapeLine, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), this.getContext(), this.getParameters());\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, this.getContext(), this.getParameters());\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, this.getContext(), this.getParameters());\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            this.getContext(), this.getParameters());\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, this.getContext(), this.getParameters());\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, this.getContext(), this.getParameters());\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Get strokes from shape inkRange\n     *\n     * @method extractStroke\n     * @param {Stroke[]} strokes\n     * @param {ShapeInkRange} inkRange\n     * @result {Stroke[]} List of strokes from inkRange\n     */\n    ShapeRenderer.prototype.extractStroke = function (strokes, inkRange) {\n        var result = [],\n            firstPointIndex = Math.floor(inkRange.getFirstPoint()),\n            lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n        for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n            var currentStroke = strokes[strokeIndex - 1];\n            var currentStrokePointCount = currentStroke.getX().length;\n\n            var newStroke = new scope.Stroke(), x = [], y = [];\n\n            for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                x.push(currentStroke.getX()[pointIndex]);\n                y.push(currentStroke.getY()[pointIndex]);\n            }\n\n            newStroke.setX(x);\n            newStroke.setY(y);\n            result.push(newStroke);\n        }\n        return result;\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = this.removeScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @param {AbstractComponent[]} components\n     * @param {MathScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MathRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getErasedInkRanges()[n].getComponent());\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getInkRanges()[p].getComponent());\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = this.removeScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @param {AbstractComponent[]} components\n     * @param {MusicScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MusicRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method staffDrawing\n     * @param {MusicStaff} staff\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawStaff = function (staff, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        this.getContext().beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                this.getContext().moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                this.getContext().lineTo(this.getContext().canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        this.getContext().stroke();\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                this.drawMusicNode(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw music node\n     *\n     * @method drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawMusicNode = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, this.getContext(), this.getParameters());\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (this.isTypesetting()) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes(), context, parameters);\n            this.drawTables(components, recognitionResult.getTables(), context, parameters);\n            this.drawTextLines(components, recognitionResult.getTextLines(), context, parameters);\n//        this.drawGroups(strokes, recognitionResult.getGroups(), context); // TODO: not implemented\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @method drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTables = function (components, tables, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in tables) {\n            if (this.getShowBoundingBoxes()) {\n                for (var j in tables[i].getCells()) {\n                    this.drawCell(tables[i].getCells()[j], context);\n                }\n            }\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), this.getContext(), this.getParameters());\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @method drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                if (this.getShowBoundingBoxes()) {\n                    this.drawRectangle(data.getBoundingBox(), context, parameters);\n                }\n\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                this.drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    this.drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @method drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        var params = this.getParameters();\n\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().globalAlpha = params.getAlpha();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().font = params.getDecoration() + textHeight + 'px ' + params.getFont();\n            this.getContext().textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            this.getContext().fillText(text, boundingBox.getX(), baseline, boundingBox.getWidth());\n\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw Underline\n     *\n     * @method drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var params = this.getParameters();\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        this.getContext().font = params.getDecoration() + textHeight + 'px ' + params.getFont();\n\n        var textMetrics = this.getContext().measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = this.getContext().measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), this.getContext(), params);\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @method drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @method drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            this.drawRectangle(cell.getData().getBoundingBox(), context, parameters);\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.setAlpha(this.penParameters.getAlpha());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        // Capture\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer(options? options.host : undefined);\n        this._mathRecognizer = new scope.MathRecognizer(options? options.host : undefined);\n        this._shapeRecognizer = new scope.ShapeRecognizer(options? options.host : undefined);\n        this._musicRecognizer = new scope.MusicRecognizer(options? options.host : undefined);\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer(options? options.host : undefined);\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this), options? options.host : undefined);\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this), options? options.host : undefined);\n\n        this._attachListeners(element);\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        this._initialize(this._getOptions());\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        this._captureCanvas.width = width;\n        this._renderingCanvas.width = width;\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        this._captureCanvas.height = height;\n        this._renderingCanvas.height = height;\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @deprecated Use setTextParameters instead\n     * @method setLanguage\n     * @param  String language\n     */\n    InkPaper.prototype.setLanguage = function (language) {\n        if(this.options.type === scope.RecognitionType.TEXT){\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setLanguage(language);\n        }\n    };\n\n    /**\n     * Set math recognition format result types\n     *\n     * @deprecated Use setMathParameters instead\n     * @method setResultTypes\n     * @param  Array resultTypes\n     */\n    InkPaper.prototype.setResultTypes = function (resultTypes) {\n        if(this.options.type === scope.RecognitionType.MATH){\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setResultTypes(resultTypes.map(function(x) { return x.toUpperCase(); }));\n        }\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._textRenderer.getParameters()[i] = penParameters[i]; // Override options\n                    this._mathRenderer.getParameters()[i] = penParameters[i]; // Override options\n                    this._shapeRenderer.getParameters()[i] = penParameters[i]; // Override options\n                    this._musicRenderer.getParameters()[i] = penParameters[i]; // Override options\n                    this._analyzerRenderer.getParameters[i] = penParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * @private\n     * @method _initialize\n     * @param {Object} options\n     */\n    InkPaper.prototype._initialize = function (options) {\n\n        this._setHost(options.host);\n\n        this.setTextParameters(options.textParameters); // jshint ignore:line\n        this.setMathParameters(options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(options.analyzerParameters); // jshint ignore:line\n\n        // Recognition type\n        this.setType(options.type);\n        this.setProtocol(options.protocol);\n        this.setTimeout(options.timeout);\n        this.setApplicationKey(options.applicationKey);\n        this.setHmacKey(options.hmacKey);\n\n        this.setPenParameters(options.penParameters);\n        this.setTypeset(options.typeset);\n\n        this.setWidth(options.width);\n        this.setHeight(options.height);\n    };\n\n    /**\n     * Get options\n     *\n     * @private\n     * @method _getOptions\n     * @returns {Object}\n     */\n    InkPaper.prototype._getOptions = function () {\n        return this.options;\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @returns {Promise}\n     */\n    InkPaper.prototype.getAvailableLanguages = function () {\n        return this._selectedRecognizer.getAvailableLanguageList(this.getApplicationKey(), this._textRecognizer.getParameters().getInputMode());\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the recognition callback\n     *\n     * @method setCallback\n     * @deprecated Use setResultCallback instead\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     */\n    InkPaper.prototype.setCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        return this._doRecognition(this.components);\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this.components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            this.redoComponents.push(this.components.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this.redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this.components.push(this.redoComponents.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            if (this._instanceId) {\n                this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                this._instanceId = undefined;\n            }\n        }\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this._inkGrabber.clear();\n        this._instanceId = undefined;\n\n        this._initRenderingCanvas();\n        this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n\n        if(this._captureCanvas.clientHeight != this._captureCanvas.height){\n            this._captureCanvas.height = this._captureCanvas.clientHeight;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight;\n        }\n        if(this._captureCanvas.clientWidth != this._captureCanvas.width){\n            this._captureCanvas.width = this._captureCanvas.clientWidth;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth;\n        }\n\n        if (this.canRedo()) {\n            this.redoComponents = [];\n            this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n        }\n        this._inkGrabber.startCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this.components.push(stroke);\n        this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            }\n        }\n    };\n\n    /**\n     * Do recognition\n     *\n     * @private\n     * @method _doRecognition\n     * @param {AbstractComponent[]} components Input components\n     */\n    InkPaper.prototype._doRecognition = function (components) {\n        if (components.length > 0) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                if (this._initialized) {\n                    var inputWS = [];\n                    if (this._selectedRecognizer instanceof scope.TextWSRecognizer) {\n                        var inputUnitWS = new scope.TextInputUnit();\n                        inputUnitWS.setComponents(this._getOptions().components.concat(components.slice(this.lastNonRecoComponentIdx)));\n                        inputWS = [inputUnitWS];\n                    } else {\n                        inputWS = components.slice(this.lastNonRecoComponentIdx);\n                    }\n                    this.lastNonRecoComponentIdx = components.length;\n\n\n                    if (this.isStarted) {\n                        this._selectedRecognizer.continueWSRecognition(inputWS, this._instanceId);\n                    } else {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(inputWS);\n                    }\n                }\n            } else {\n                var input = [];\n                if (this._selectedRecognizer instanceof scope.TextRecognizer) {\n                    var inputUnit = new scope.TextInputUnit();\n                    inputUnit.setComponents(this._getOptions().components.concat(components));\n                    input = [inputUnit];\n                } else if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                    input = components.slice(this.lastNonRecoComponentIdx);\n                    this.lastNonRecoComponentIdx = components.length;\n                } else {\n                    input = input.concat(this._getOptions().components, components);\n                }\n                this._selectedRecognizer.doSimpleRecognition(\n                    this.getApplicationKey(),\n                    this._instanceId,\n                    input,\n                    this.getHmacKey()\n                ).then(\n                    function (data) {\n                        return this._parseResult(data, input);\n                    }.bind(this),\n                    function (error) {\n                        this._onResult(undefined, error);\n                        return error;\n                    }.bind(this)\n                ).done();\n            }\n        } else {\n            this.isStarted = false;\n            this._selectedRenderer.clear();\n            this._initRenderingCanvas();\n            this._onResult();\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('failure', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function (changes) {\n        if (this.changeCallback) {\n            this.changeCallback(changes)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: changes}));\n    };\n\n    InkPaper.prototype._parseResult = function (data, input) {\n\n        if (!this._instanceId) {\n            this._instanceId = data.getInstanceId();\n        } else if (this._instanceId !== data.getInstanceId()) {\n            this._onResult(data);\n            return data;\n        }\n\n        if (data.getDocument().hasScratchOutResults() || this._selectedRenderer.isTypesetting()) {\n            this._selectedRenderer.clear();\n            this._selectedRenderer.drawRecognitionResult(input, data.getDocument());\n        }\n\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service host\n     *\n     * @private\n     * @param {String} host\n     */\n    InkPaper.prototype._setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n                console.log('pointerenter');\n                console.log(e);\n            }\n        }, false);\n\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n        this._drawInput(this.components);\n    };\n\n    InkPaper.prototype._drawInput = function (components) {\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            } else {\n                throw new Error('Missing music staff');\n            }\n        }\n        this._selectedRenderer.drawComponents(this._getOptions().components.concat(components));\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this.lastNonRecoComponentIdx = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge (this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    break;\n                default: {\n                    this._parseResult(message, this.components);\n                    break;\n                }\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n","/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n","'use strict';\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Complex Point object used for quadratic calculation\n     *\n     * @deprecated\n     * @class QuadraticPoint\n     * @extends Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function QuadraticPoint(obj) {\n        scope.Point.call(this, obj);\n        this.pressure = 0.5;\n        this.distance = 0.0;\n        this.length = 0.0;\n        this.cos = 0.0;\n        this.sin = 0.0;\n        this.p1 = new scope.Point(obj);\n        this.p2 = new scope.Point(obj);\n        if (obj) {\n            this.pressure = obj.pressure;\n            this.distance = obj.distance;\n            this.length = obj.length;\n            this.cos = obj.cos;\n            this.sin = obj.sin;\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    QuadraticPoint.prototype = new scope.Point();\n\n    /**\n     * Constructor property\n     */\n    QuadraticPoint.prototype.constructor = QuadraticPoint;\n\n    /**\n     * Get pressure\n     *\n     * @method getPressure\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getPressure = function () {\n        return this.pressure;\n    };\n\n    /**\n     * Set pressure\n     *\n     * @method setPressure\n     * @param {Number} pressure\n     */\n    QuadraticPoint.prototype.setPressure = function (pressure) {\n        this.pressure = pressure;\n    };\n\n    /**\n     * Get distance\n     *\n     * @method getDistance\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getDistance = function () {\n        return this.distance;\n    };\n\n    /**\n     * Set distance\n     *\n     * @method setDistance\n     * @param {Number} distance\n     */\n    QuadraticPoint.prototype.setDistance = function (distance) {\n        this.distance = distance;\n    };\n\n    /**\n     * Get length\n     *\n     * @method getLength\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getLength = function () {\n        return this.length;\n    };\n\n    /**\n     * Set length\n     *\n     * @method setLength\n     * @param {Number} length\n     */\n    QuadraticPoint.prototype.setLength = function (length) {\n        this.length = length;\n    };\n\n    /**\n     * Get cos\n     *\n     * @method getCos\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getCos = function () {\n        return this.cos;\n    };\n\n    /**\n     * Set cos\n     *\n     * @method setCos\n     * @param {Number} cos\n     */\n    QuadraticPoint.prototype.setCos = function (cos) {\n        this.cos = cos;\n    };\n\n    /**\n     * Get sin\n     *\n     * @method getSin\n     * @returns {Number}\n     */\n    QuadraticPoint.prototype.getSin = function () {\n        return this.sin;\n    };\n\n    /**\n     * Set sin\n     *\n     * @method setSin\n     * @param {Number} sin\n     */\n    QuadraticPoint.prototype.setSin = function (sin) {\n        this.sin = sin;\n    };\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Set p1\n     *\n     * @method setP1\n     * @param {Point} p1\n     */\n    QuadraticPoint.prototype.setP1 = function (p1) {\n        this.p1 = p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    QuadraticPoint.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    /**\n     * Set p2\n     *\n     * @method setP2\n     * @param {Point} p2\n     */\n    QuadraticPoint.prototype.setP2 = function (p2) {\n        this.p2 = p2;\n    };\n\n    // Export\n    scope.QuadraticPoint = QuadraticPoint;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * The InkManager class that can use to store writing strokes and manage the undo/redo/clear system\n     *\n     * @deprecated\n     * @class InkManager\n     * @constructor\n     */\n    function InkManager() {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    }\n\n    /**\n     * Is Writing a stroke\n     *\n     * @deprecated\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last current Stroke write\n     *\n     * @deprecated\n     * @method getCurrentStroke\n     * @returns {Stroke}\n     */\n    InkManager.prototype.getCurrentStroke = function () {\n        return this.currentStroke;\n    };\n\n    /**\n     * Start ink capture\n     *\n     * @deprecated\n     * @method startInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.startInkCapture = function (x, y, t) {\n        if (!this.writing) {\n            if (!this.isRedoEmpty()) {\n                this.clearUndoRedoStack();\n            }\n            this.currentStroke = new scope.Stroke();\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n            this.writing = true;\n        } else {\n            throw new Error('Stroke capture already running');\n        }\n    };\n\n    /**\n     * Continue ink capture\n     *\n     * @deprecated\n     * @method continueInkCapture\n     * @param {Number} x abscissa coordinate\n     * @param {Number} y ordinate coordinate\n     * @param {Number} [t] event timestamp\n     */\n    InkManager.prototype.continueInkCapture = function (x, y, t) {\n        if (this.writing) {\n            this.currentStroke.addX(x);\n            this.currentStroke.addY(y);\n            this.currentStroke.addT(t);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * End ink capture\n     *\n     * @deprecated\n     * @method endInkCapture\n     */\n    InkManager.prototype.endInkCapture = function () {\n        if (this.writing) {\n            this.strokes.push(this.currentStroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    /**\n     * Clear the strokes list\n     *\n     * @deprecated\n     * @method clear\n     */\n    InkManager.prototype.clear = function () {\n        this.writing = false;\n        this.strokes = [];\n        this.currentStroke = null;\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Is The Strokes list is empty\n     *\n     * @deprecated\n     * @method isEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isEmpty = function () {\n        return this.strokes.length === 0;\n    };\n\n    /**\n     * Is the Undo/Redo Stack empty\n     *\n     * @method isRedoEmpty\n     * @returns {Boolean}\n     */\n    InkManager.prototype.isRedoEmpty = function () {\n        return this.undoRedoStack.length === 0;\n    };\n\n    /**\n     * Make an undo\n     *\n     * @deprecated\n     * @method undo\n     */\n    InkManager.prototype.undo = function () {\n        if (!this.isEmpty()) {\n            this.undoRedoStack.push(this.strokes.pop());\n        }\n    };\n\n    /**\n     * Make a redo\n     *\n     * @deprecated\n     * @method redo\n     */\n    InkManager.prototype.redo = function () {\n        if (!this.isRedoEmpty()) {\n            this.strokes.push(this.undoRedoStack.pop());\n        }\n    };\n\n    /**\n     * Get the strokes list\n     *\n     * @deprecated\n     * @method getStokes\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getStrokes = function () {\n        return this.strokes;\n    };\n\n    /**\n     * Get the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method getUndoRedoStack\n     * @returns {Stroke[]}\n     */\n    InkManager.prototype.getUndoRedoStack = function () {\n        return this.undoRedoStack;\n    };\n\n    /**\n     * Clear the Undo/Redo Stack\n     *\n     * @deprecated\n     * @method clearUndoRedoStack\n     */\n    InkManager.prototype.clearUndoRedoStack = function () {\n        this.undoRedoStack = [];\n    };\n\n    /**\n     * Copy the strokes values from index on an other list of strokes\n     *\n     * @deprecated\n     * @method copy\n     * @param {Stroke[]} strokes List of strokes\n     * @param {Number} index Position to start the copy\n     */\n    InkManager.prototype.copy = function (strokes, index) {\n        for (index; index < this.strokes.length; index++) {\n            strokes.push(this.strokes[index]);\n        }\n    };\n\n    // Export\n    scope.InkManager = InkManager;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw. Default values:\n     * color: 'black';\n     * rectColor: 'rgba(0, 0, 0, 0.2)';\n     * font: 'Times New Roman';\n     * decoration: '';\n     * width: 4;\n     * pressureType: 'SIMULATED';\n     * alpha: '1.0';\n     * showBoundingBoxes: false;\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters() {\n        this.color = 'black';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = '';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get the pressure renderer parameter\n     *\n     * @method getPressureType\n     * @returns {String} The pressure type\n     */\n    PenParameters.prototype.getPressureType = function () {\n        return this.pressureType;\n    };\n\n    /**\n     * Set the pressure renderer parameter\n     *\n     * @method setPressureType\n     * @param {String} pressureType\n     */\n    PenParameters.prototype.setPressureType = function (pressureType) {\n        this.pressureType = pressureType;\n    };\n\n    /**\n     * Get the alpha renderer parameter\n     *\n     * @method getAlpha\n     * @returns {String} The alpha\n     */\n    PenParameters.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    /**\n     * Set the alpha renderer parameter\n     *\n     * @method setAlpha\n     * @param {String} alpha\n     */\n    PenParameters.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @deprecated Use 'PenParameters' instead\n     * @class RenderingParameters\n     * @constructor\n     */\n    function RenderingParameters() {\n        scope.PenParameters.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    RenderingParameters.prototype = new scope.PenParameters();\n\n    /**\n     * Constructor property\n     */\n    RenderingParameters.prototype.constructor = RenderingParameters;\n\n    // Export\n    scope.RenderingParameters = RenderingParameters;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the slope.\n     *\n     * @method getComputedSlope\n     * @param {Point} pA Point A\n     * @param {Point} pB Point B\n     * @returns {Number}\n     */\n    MathUtils.getComputedSlope = function (pA, pB) {\n        return (pB.getY() - pA.getY()) / (pB.getX() - pA.getX());\n    };\n\n    /**\n     * This method is use to calculate the sheath points.\n     *\n     * @method getSheathPoints\n     * @param {Point} originPoint Origin point\n     * @param {Number} slope Slope\n     * @param {Number} delta Delta\n     * @returns {Object}\n     */\n    MathUtils.getSheathPoints = function (originPoint, slope, delta) {\n        var x = Math.sqrt(Math.pow(delta, 2) / (1 + 1 / (Math.pow(slope, 2))));\n        var y = -(1/slope) * x;\n        return {\n            p1: new scope.Point({x: x + originPoint.getX(), y: y + originPoint.getY()}),\n            p2: new scope.Point({x: -x + originPoint.getX(), y: -y + originPoint.getY()})\n        };\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @deprecated Use StrokeComponent instead\n     * @class Stroke\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function Stroke(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.t = obj.t;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    Stroke.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    Stroke.prototype.constructor = Stroke;\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    Stroke.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    Stroke.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    Stroke.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    Stroke.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    Stroke.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    Stroke.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    Stroke.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    Stroke.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    Stroke.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    // Export\n    scope.Stroke = Stroke;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent a simple stroke input component\n     *\n     * @class StrokeComponent\n     * @extends Stroke\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.Stroke.call(this);\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            this.p = obj.p;\n            this.d = obj.p;\n            this.l = obj.l;\n            this.color = obj.color;\n            this.alpha = obj.alpha;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.Stroke();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**     *\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    StrokeComponent.prototype.getAlpha = function () {\n        return this.alpha;\n    };\n\n    StrokeComponent.prototype.setAlpha = function (alpha) {\n        this.alpha = alpha;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (this.filterPointByAcquisitionDelta(x, y)) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(this.computeP(x, y));\n            this.addD(this.computeD(x, y));\n            this.addL(this.computeL(x, y));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    StrokeComponent.prototype.computeD = function (x, y) {\n        var distance = Math.sqrt(Math.pow((y - this.getY()[this.getLastIndexPoint() - 1]), 2) + Math.pow((x - this.getX()[this.getLastIndexPoint() - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    };\n\n    StrokeComponent.prototype.computeL = function (x, y) {\n        var length = this.getL()[this.getLastIndexPoint() - 1] + this.computeD(x, y);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    };\n\n    StrokeComponent.prototype.computeP = function (x, y) {\n        var ratio = 1.0;\n        var distance = this.computeD(x, y);\n        var length = this.computeL(x, y);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    };\n\n    StrokeComponent.prototype.filterPointByAcquisitionDelta = function (x, y) {\n        var delta = (2 + (this.getWidth() / 4));\n        var ret = false;\n        if (this.getLength() === 0 || Math.abs(this.getX()[this.getLastIndexPoint()] - x) >= delta || Math.abs(this.getY()[this.getLastIndexPoint()] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    };\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent() {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(alternate, probability) {\n        this.alternate = alternate;\n        this.probability = probability;\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent() {\n        scope.AbstractComponent.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent() {\n        this.type = 'char';\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get character\n     *\n     * @deprecated Use 'getLabel'\n     * @method getCharacter\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getCharacter = function () {\n        return this.character;\n    };\n\n    /**\n     * Set character\n     *\n     * @deprecated Use 'setLabel'\n     * @method setCharacter\n     * @param {String} character\n     */\n    CharInputComponent.prototype.setCharacter = function (character) {\n        this.character = character;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent() {\n        this.type = 'string';\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get string\n     *\n     * @deprecated Use 'getLabel'\n     * @method getString\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getString = function () {\n        return this.string;\n    };\n\n    /**\n     * Set string\n     *\n     * @deprecated Use 'setLabel'\n     * @method setString\n     * @param {String} string\n     */\n    StringInputComponent.prototype.setString = function (string) {\n        this.string = string;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties() {\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @method getTextRecognitionInput\n     * @returns {TextRecognitionInput} inputMode\n     */\n    TextRecognitionData.prototype.getTextRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setTextRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setTextRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method getDoBeautification\n     * @returns {Boolean}\n     */\n    ShapeRecognitionInput.prototype.getDoBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setDoBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeRecognitionInput.prototype.setDoBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Number}\n     */\n    ShapeRecognitionInput.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Number} rejectDetectionSensitivity\n     */\n    ShapeRecognitionInput.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @method getShapeRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getShapeRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setShapeRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setShapeRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathRecognitionInput.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathRecognitionInput.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n    /**\n     * Get math input\n     *\n     * @method getMathRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getMathRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setMathRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setMathRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent() {\n        scope.AbstractComponent.call(this);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent() {\n        this.type = 'accidental';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent() {\n        this.type = 'arpeggiate';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent() {\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent() {\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent() {\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent() {\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent() {\n        this.type = 'dots';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent() {\n        this.type = 'head';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent() {\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent() {\n        this.type = 'rest';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent() {\n        this.type = 'stem';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent() {\n        this.type = 'tieOrSlur';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent() {\n        this.type = 'timeSignature';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff() {\n        this.count = 5;\n        this.gap = 20;\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    /**\n     * Get the result types\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the result types\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicRecognitionInput.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicRecognitionInput.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicRecognitionInput.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicRecognitionInput.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicRecognitionInput.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRecognitionInput.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicRecognitionInput.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicRecognitionInput.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @method getMusicRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getMusicRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setMusicRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setMusicRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @method getAnalyzerRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getAnalyzerRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setAnalyzerRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setAnalyzerRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            var cpt = obj.split(/[:-]+/);\n            this.startUnit = Number(cpt[0]);\n            this.startComponent = Number(cpt[1]);\n            this.startPoint = Number(cpt[2]);\n            this.endUnit = Number(cpt[3]);\n            this.endComponent = Number(cpt[4]);\n            this.endPoint = Number(cpt[5]);\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResult.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges.split(/[\\s]+/);\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges.split(/[\\s]+/);\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    /**\n     * Get text document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    TextResponseWSMessage.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    /**\n     * Get shape document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getShapeDocument\n     * @returns {ShapeDocument}\n     */\n    ShapeResult.prototype.getShapeDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResult.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    /**\n     * Get math document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMathDocument\n     * @returns {MathDocument}\n     */\n    MathResponseWSMessage.prototype.getMathDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    /**\n     * Get music document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getMusicDocument\n     * @returns {MusicDocument}\n     */\n    MusicResult.prototype.getMusicDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    /**\n     * Get analyzer document\n     *\n     * @deprecated Use getDocument() instead\n     * @method getAnalyzerDocument\n     * @returns {AnalyzerDocument}\n     */\n    AnalyzerResult.prototype.getAnalyzerDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);","'use strict';\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.xhr = function (type, url, data) {\n\n        var deferred = Q.defer();\n\n        function onStateChange() {\n            if (request.readyState === 4) {\n                if (request.status >= 200 && request.status < 300) {\n                    deferred.resolve(NetworkInterface.parse(request));\n                }\n            }\n        }\n\n        function onLoad() {\n            if (request.status >= 200 && request.status < 300) {\n                deferred.resolve(NetworkInterface.parse(request));\n            } else {\n                deferred.reject(new Error(request.responseText));\n            }\n        }\n\n        function onError() {\n            deferred.reject(new Error('Can\\'t XHR ' + url));\n        }\n\n        function onProgress(event) {\n            deferred.notify(event.loaded / event.total);\n        }\n\n        var request = new XMLHttpRequest();\n        request.open(type, url, true);\n        request.withCredentials = true;\n        request.setRequestHeader('Accept', 'application/json');\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        request.onload = onLoad;\n        request.onerror = onError;\n        request.onprogress = onProgress;\n        request.onreadystatechange = onStateChange;\n        request.send(NetworkInterface.transformRequest(data));\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return this.xhr('GET', src).then(\n            function success(response) {\n                return response;\n            }, function error(response) {\n                throw response;\n            });\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} src\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.put = function (url, data) {\n        return this.xhr('PUT', url, data).then(\n            function success(response) {\n                return response;\n            }, function error(response) {\n                throw response;\n            });\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} src\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.post = function (url, data) {\n        return this.xhr('POST', url, data).then(\n            function success(response) {\n                return response;\n            }, function error(response) {\n                throw response;\n            });\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} src\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.prototype.delete = function (url, data) {\n        return this.xhr('DELETE', url, data).then(\n            function success(response) {\n                return response;\n            }, function error(response) {\n                throw response;\n            });\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n","'use strict';\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface(url, callback) {\n        this._url = url;\n        this._callback = callback;\n    }\n\n    NetworkWSInterface.prototype.send = function (request) {\n        if (this._socket) {\n            this._socket.send(JSON.stringify(request));\n        }\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        if (this._socket) {\n            return this._socket.readyState === 3;\n        }\n        return false;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        if (this._socket) {\n            return this._socket.readyState === 2;\n        }\n        return false;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        if (this._socket) {\n            return this._socket.readyState === 1;\n        }\n        return false;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        if (this._socket) {\n            return this._socket.readyState === 0;\n        }\n        return false;\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this._socket) {\n            this._socket.close(code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        var self = this;\n        this._socket = new WebSocket(this._url);\n\n        this._socket.onopen = function (e) {\n            self._callback(e);\n        };\n        this._socket.onclose = function (e) {\n            self._callback(e);\n        };\n        this._socket.onerror = function (e) {\n            self._callback(e);\n        };\n\n        this._socket.onmessage = function (e) {\n            self._callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        };\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n","'use strict';\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.host = 'cloud.myscript.com';\n        if (host) {\n            this.setHost(host);\n        }\n        this.http = new scope.NetworkInterface();\n    }\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return this.host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.host = host;\n        }\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return this.http.get('https://' + this.host + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @method computeHmac\n     * @param {String} applicationKey\n     * @param {String} data\n     * @param {String} hmacKey\n     */\n    AbstractRecognizer.prototype.computeHmac = function (applicationKey, data, hmacKey) {\n        var jsonInput = (typeof data === 'object') ? JSON.stringify(data) : data;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractWSRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractWSRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AbstractWSRecognizer.prototype.constructor = AbstractWSRecognizer;\n\n    AbstractWSRecognizer.prototype._init = function (endpoint, callback) {\n        this._wsInterface = new scope.NetworkWSInterface(endpoint, callback);\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(this.computeHmac(applicationKey, challenge, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, inputUnits, hmacKey, parameters) {\n        var input = new scope.TextRecognitionInput();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n\n        var data = new scope.TextRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setTextRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this, host);\n        this._endpoint = 'wss://' + this.getHost() + '/api/v3.0/recognition/ws/text';\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this._init(this._endpoint, function (message) {\n            switch (message.type) {\n                case 'open':\n                    callback(message);\n                    break;\n                case 'close':\n                    callback(message);\n                    break;\n                case 'error':\n                    callback(undefined, message);\n                    break;\n                default:\n                    switch (message.data.type) {\n                        case 'init':\n                            message.data = new scope.InitResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        case 'reset':\n                            message.data = new scope.ResetResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        case 'error':\n                            message.data = new scope.ErrorResponseWSMessage(message.data);\n                            callback(undefined, message.data);\n                            break;\n                        case 'hmacChallenge':\n                            message.data = new scope.ChallengeResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        default:\n                            message.data = new scope.TextResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                    }\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (inputUnits, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {TextInputUnit[]} inputUnits\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (inputUnits, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {ShapeParameter}\n     */\n    ShapeRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {ShapeParameter} parameters\n     */\n    ShapeRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.ShapeRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setDoBeautification(params.hasBeautification());\n        input.setRejectDetectionSensitivity(params.getRejectDetectionSensitivity());\n\n        var data = new scope.ShapeRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setShapeRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return response;\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.MathRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setResultTypes(params.getResultTypes());\n        input.setColumnar(params.isColumnar());\n        input.setScratchOutDetectionSensitivity(params.getScratchOutDetectionSensitivity());\n        input.setUserResources(params.getUserResources());\n\n        var data = new scope.MathRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setMathRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this, host);\n        this._endpoint = 'wss://' + this.getHost() + '/api/v3.0/recognition/ws/math';\n        this.parameters = new scope.MathParameter();\n        this._init(this._endpoint, function (message) {\n            switch (message.type) {\n                case 'open':\n                    callback(message);\n                    break;\n                case 'close':\n                    callback(message);\n                    break;\n                case 'error':\n                    callback(undefined, message);\n                    break;\n                default:\n                    switch (message.data.type) {\n                        case 'init':\n                            message.data = new scope.InitResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        case 'reset':\n                            message.data = new scope.ResetResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        case 'error':\n                            message.data = new scope.ErrorResponseWSMessage(message.data);\n                            callback(undefined, message.data);\n                            break;\n                        case 'hmacChallenge':\n                            message.data = new scope.ChallengeResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                        default:\n                            message.data = new scope.MathResponseWSMessage(message.data);\n                            callback(message.data);\n                            break;\n                    }\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MusicParameter}\n     */\n    MusicRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MusicParameter} parameters\n     */\n    MusicRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.MusicRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setStaff(params.getStaff());\n        input.setDivisions(params.getDivisions());\n        input.setResultTypes(params.getResultTypes());\n        input.setScratchOutDetectionSensitivity(params.getScratchOutDetectionSensitivity());\n        input.setUserResources(params.getUserResources());\n\n        var data = new scope.MusicRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setMusicRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            },\n            function error(response) {\n                throw response;\n            }\n        );\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setComponents(components);\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        input.setParameters(params);\n\n        var data = new scope.AnalyzerRecognitionData();\n        data.setApplicationKey(applicationKey);\n        data.setAnalyzerRecognitionInput(input);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(this.computeHmac(applicationKey, input, hmacKey));\n        }\n\n        return this.http.post('https://' + this.host + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            },\n            function error(response) {\n                return response;\n            }\n        );\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n        this.points = [];\n        this.drawing = false;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * Set the context (legacy code for non-regression)\n     *\n     * @private\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype._setContext = function (context) {\n        this.context = context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponents = function (components, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawComponent = function (component, context, parameters) {\n        if (component instanceof scope.Stroke) {\n            this.drawStroke(component, context, parameters);\n        } else if (component instanceof scope.CharacterInputComponent) {\n            this.drawCharacter(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @method drawRectangle\n     * @param {Rectangle} rectangle\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawRectangle = function (rectangle, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var params = this.getParameters();\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getRectColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().globalAlpha = params.getAlpha();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawCharacter = function (character, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method drawStroke\n     * @param {Stroke} stroke\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStroke = function (stroke, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (stroke && stroke.getLength() > 0) {\n            if (stroke instanceof scope.StrokeComponent) {\n                _renderStroke(stroke, this.getContext());\n            } else {\n                this.drawStart(stroke.getX()[0], stroke.getY()[0]);\n                for (var i = 0; i < stroke.getLength(); ++i) {\n                    this.drawContinue(stroke.getX()[i], stroke.getY()[i], context, parameters);\n                }\n                this.drawEnd(stroke.getX()[stroke.getLength() - 1], stroke.getY()[stroke.getLength() - 1], context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw stroke components\n     *\n     * @private\n     * @method drawStrokes\n     * @param {Stroke[]} strokes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStrokes = function (strokes, context, parameters) {\n        for(var i = 0; i < strokes.length;i++){\n            this.drawStroke(strokes[i], context, parameters);\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x : (point.x - Math.sin(angle) * radius),\n            y : (point.y + Math.cos(angle) * radius)\n        }, {\n            x : (point.x + Math.sin(angle) * radius),\n            y : (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x : ((point2.x + point1.x) / 2),\n            y : ((point2.y + point1.y) / 2),\n            p : ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color, alpha) {\n        if (color !== undefined) {\n            context.globalAlpha = alpha;\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3){\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++){\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor(), stroke.getAlpha());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    /**\n     * DEPRECATED METHODS\n     */\n\n    /**\n     * Record the beginning of drawing\n     *\n     * @deprecated\n     * @method drawStart\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawStart = function (x, y, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        this.points = [];\n        this.drawing = true;\n        this.points.push(new scope.QuadraticPoint({x: x, y: y}));\n    };\n\n    /**\n     * Record the drawing\n     *\n     * @deprecated\n     * @method drawContinue\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawContinue = function (x, y, context, parameters) {\n        if (this.drawing) {\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            var params = this.getParameters();\n            var delta = 2 + (params.getWidth() / 4);\n            var last = this.points[this.points.length - 1];\n\n            if (Math.abs(last.getX() - x) >= delta || Math.abs(last.getY() - y) >= delta) {\n\n                if (this.points.length === 1) { // firstPoint\n\n                    var pA = this.points[this.points.length - 1]; // firstPoint\n                    var pB = new scope.QuadraticPoint({x: x, y: y});\n                    var pAB = new scope.QuadraticPoint({\n                        x: 0.5 * (pA.getX() + pB.getX()),\n                        y: 0.5 * (pA.getY() + pB.getY())\n                    });\n                    _computePointParameters(pA, pAB, params.getPressureType());\n                    _computePointParameters(pAB, pB, params.getPressureType());\n\n                    _computeFirstControls(pA, pAB, params.getWidth());\n                    _computeControls(pAB, pB, params.getWidth());\n\n                    this.points.push(pAB);\n                    this.points.push(pB);\n\n                    _drawFirstSegment(pA, pAB, this.getContext(), params);\n\n                } else {\n                    var pAB = this.points[this.points.length - 2]; // jshint ignore:line\n                    var pB = this.points[this.points.length - 1]; // jshint ignore:line\n                    var pC = new scope.QuadraticPoint({x: x, y: y});\n                    var pBC = new scope.QuadraticPoint({\n                        x: 0.5 * (pB.getX() + pC.getX()),\n                        y: 0.5 * (pB.getY() + pC.getY())\n                    });\n                    _computePointParameters(pB, pBC, params.getPressureType());\n                    _computePointParameters(pBC, pC, params.getPressureType());\n\n                    _computeControls(pB, pBC, params.getWidth());\n                    _computeControls(pBC, pC, params.getWidth());\n\n                    this.points.push(pBC);\n                    this.points.push(pC);\n\n                    _drawSegment(pAB, pB, pBC, this.getContext(), params);\n                }\n            }\n        }\n    };\n\n    /**\n     * Stop record of drawing\n     *\n     * @deprecated\n     * @method drawEnd\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AbstractRenderer.prototype.drawEnd = function (x, y, context, parameters) {\n        if (this.drawing) {\n            var params = this.getParameters();\n            if (context) {\n                this._setContext(context);\n            }\n            if (parameters) {\n                this.setParameters(parameters);\n            }\n\n            if (this.points.length === 1) {\n                _drawPoint(new scope.QuadraticPoint({x: x, y: y}), this.getContext(), params);\n            } else if (this.points.length > 1) {\n                var pA = this.points[this.points.length - 1];\n                var pB = new scope.QuadraticPoint({x: x, y: y});\n                var pAB = new scope.QuadraticPoint({\n                    x: 0.5 * (pA.getX() + pB.getX()),\n                    y: 0.5 * (pA.getY() + pB.getY())\n                });\n                _computePointParameters(pA, pAB, params.getPressureType());\n                _computePointParameters(pAB, pB, params.getPressureType());\n\n                _computeControls(pA, pAB, params.getWidth());\n                _computeLastControls(pB, params.getWidth());\n\n                this.points.push(pAB);\n                this.points.push(pB);\n\n                _drawLastSegment(pAB, pB, this.getContext(), params);\n            }\n            this.drawing = false;\n        }\n    };\n\n    /**\n     * Draw point on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawPoint\n     * @param {QuadraticPoint} point\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawPoint = function (point, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.arc(point.getX(), point.getY(), 0.25 * parameters.getWidth(), 0, 2 * Math.PI);\n            context.fill();\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw the first stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawFirstSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawFirstSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Draw middle stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {QuadraticPoint} pC\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawSegment = function (pA, pB, pC, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.quadraticCurveTo(pB.getP1().getX(), pB.getP1().getY(), pC.getP1().getX(), pC.getP1().getY());\n            context.lineTo(pC.getP2().getX(), pC.getP2().getY());\n            context.quadraticCurveTo(pB.getP2().getX(), pB.getP2().getY(), pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw the last stroke segment on context\n     *\n     * @private\n     * @deprecated\n     * @method _drawLastSegment\n     * @param {QuadraticPoint} pA\n     * @param {QuadraticPoint} pB\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLastSegment = function (pA, pB, context, parameters) {\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = 1;\n            context.lineWidth = 1;\n\n            context.beginPath();\n            context.moveTo(pA.getP1().getX(), pA.getP1().getY());\n            context.lineTo(pB.getP1().getX(), pB.getP1().getY());\n            context.lineTo(pB.getP2().getX(), pB.getP2().getY());\n            context.lineTo(pA.getP2().getX(), pA.getP2().getY());\n            context.closePath();\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Compute distance and unit vector from the previous point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePointParameters\n     * @param {QuadraticPoint} previous\n     * @param {QuadraticPoint} point\n     * @param {String} pressureType\n     */\n    var _computePointParameters = function (previous, point, pressureType) {\n        var dx = point.getX() - previous.getX(),\n            dy = point.getY() - previous.getY(),\n            d = Math.sqrt((dx * dx) + (dy * dy));\n\n        if (d !== 0) {\n            point.setDistance(d);\n            point.setCos(dx / d);\n            point.setSin(dy / d);\n        }\n        point.setLength(previous.getLength() + point.getDistance());\n\n        switch (pressureType) {\n            case 'SIMULATED':\n                _computePressure(point);\n                break;\n            case 'CONSTANT':\n                point.setPressure(1.0);\n                break;\n            case 'REAL':\n                // keep the current pressure\n                break;\n            default:\n                throw new Error('Unknown pressure type');\n        }\n    };\n\n    /**\n     * Compute simulated pressure of given point.\n     *\n     * @private\n     * @deprecated\n     * @method _computePressure\n     * @param {QuadraticPoint} point\n     */\n    var _computePressure = function (point) {\n        var k, pressure;\n        if (point.getDistance() < 10) {\n            k = 0.2 + Math.pow(0.1 * point.getDistance(), 0.4);\n        } else if (point.getDistance() > point.getLength() - 10) {\n            k = 0.2 + Math.pow(0.1 * (point.getLength() - point.getDistance()), 0.4);\n        } else {\n            k = 1.0;\n        }\n\n        pressure = k * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(point.getDistance()));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        point.setPressure(pressure);\n    };\n\n    /**\n     * Compute control points of the first point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeFirstControls\n     * @param {QuadraticPoint} first First point of the list to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeFirstControls = function (first, next, penWidth) {\n        var r = 0.5 * (penWidth * first.getPressure()),\n            nx = r * next.getSin(),\n            ny = r * next.getCos();\n\n        first.getP1().setX(first.getX() - nx);\n        first.getP1().setY(first.getY() + ny);\n        first.getP2().setX(first.getX() + nx);\n        first.getP2().setY(first.getY() - ny);\n    };\n\n    /**\n     * Compute control points between two points.\n     *\n     * @private\n     * @deprecated\n     * @method _computeControls\n     * @param {QuadraticPoint} point Point to be computed\n     * @param {QuadraticPoint} next Next point\n     * @param {Number} penWidth Pen width\n     */\n    var _computeControls = function (point, next, penWidth) {\n        var cos = point.getCos() + next.getCos(),\n            sin = point.getSin() + next.getSin(),\n            u = Math.sqrt((cos * cos) + (sin * sin));\n\n        if (u !== 0) {\n            // compute control points\n            var r = 0.5 * penWidth * point.getPressure();\n            var nx = -r * sin / u;\n            var ny = r * cos / u;\n            point.getP1().setX(point.getX() + nx);\n            point.getP1().setY(point.getY() + ny);\n            point.getP2().setX(point.getX() - nx);\n            point.getP2().setY(point.getY() - ny);\n        }\n    };\n\n    /**\n     * Compute control points of the last point.\n     *\n     * @private\n     * @deprecated\n     * @method _computeLastControls\n     * @param {QuadraticPoint} last Last point to be computed\n     * @param {Number} penWidth Pen width\n     */\n    var _computeLastControls = function (last, penWidth) {\n        var r = 0.5 * penWidth * last.getPressure(),\n            nx = -r * last.getSin(),\n            ny = r * last.getCos();\n\n        last.getP1().setX(last.getX() + nx);\n        last.getP1().setY(last.getY() + ny);\n        last.getP2().setX(last.getX() - nx);\n        last.getP2().setY(last.getY() - ny);\n    };\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {TextInputUnit[]} inputUnits\n     * @param {TextDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (inputUnits, recognitionResult, context, parameters) {\n        this.drawInputUnits(inputUnits, context, parameters);\n    };\n\n    /**\n     * Draw input units\n     *\n     * @method drawInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawInputUnits = function (inputUnits, context, parameters) {\n        for (var i in inputUnits) {\n            this.drawComponents(inputUnits[i].getComponents(), context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractTextInputComponent) {\n                this.drawTextComponent(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @method drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    TextRenderer.prototype.drawTextComponent = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, this.getContext(), this.getParameters());\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (this.isTypesetting()) {\n            this.drawShapes(components, recognitionResult.getSegments(), context, parameters);\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.drawShapePrimitive(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes, context, parameters) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment, context, parameters) {\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            this.drawShapeRecognized(candidate, context, parameters);\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            this.drawShapeNotRecognized(components, segment.getInkRanges(), context, parameters);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @method drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        this.drawComponents(shapeRecognized.getPrimitives(), context, parameters);\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges, context, parameters) {\n        var notRecognized = [];\n        for (var i in inkRanges) {\n            notRecognized.concat(this.extractStroke(components, inkRanges[i]));\n        }\n        this.drawComponents(notRecognized, context, parameters);\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            this.drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            this.drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @method drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeLine = function (shapeLine, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), this.getContext(), this.getParameters());\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, this.getContext(), this.getParameters());\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, this.getContext(), this.getParameters());\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @method drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    ShapeRenderer.prototype.drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            this.getContext(), this.getParameters());\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, this.getContext(), this.getParameters());\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, this.getContext(), this.getParameters());\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Get strokes from shape inkRange\n     *\n     * @method extractStroke\n     * @param {Stroke[]} strokes\n     * @param {ShapeInkRange} inkRange\n     * @result {Stroke[]} List of strokes from inkRange\n     */\n    ShapeRenderer.prototype.extractStroke = function (strokes, inkRange) {\n        var result = [],\n            firstPointIndex = Math.floor(inkRange.getFirstPoint()),\n            lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n        for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n            var currentStroke = strokes[strokeIndex - 1];\n            var currentStrokePointCount = currentStroke.getX().length;\n\n            var newStroke = new scope.Stroke(), x = [], y = [];\n\n            for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                x.push(currentStroke.getX()[pointIndex]);\n                y.push(currentStroke.getY()[pointIndex]);\n            }\n\n            newStroke.setX(x);\n            newStroke.setY(y);\n            result.push(newStroke);\n        }\n        return result;\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = this.removeScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MathRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @param {AbstractComponent[]} components\n     * @param {MathScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MathRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getErasedInkRanges()[n].getComponent());\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                componentsToRemove.push(scratchOutResults[k].getInkRanges()[p].getComponent());\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        var notScratchOutComponents = this.removeScratchOut(components, recognitionResult.getScratchOutResults());\n        this.drawComponents(notScratchOutComponents, context, parameters);\n    };\n\n    /**\n     * Remove scratch out from input components\n     *\n     * @param {AbstractComponent[]} components\n     * @param {MusicScratchOut[]} scratchOutResults\n     * @returns {AbstractComponent[]} notScratchOutComponents\n     */\n    MusicRenderer.prototype.removeScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method staffDrawing\n     * @param {MusicStaff} staff\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawStaff = function (staff, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        this.getContext().beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                this.getContext().moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                this.getContext().lineTo(this.getContext().canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        this.getContext().stroke();\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                this.drawMusicNode(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw music node\n     *\n     * @method drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    MusicRenderer.prototype.drawMusicNode = function (component, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, this.getContext(), this.getParameters());\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult, context, parameters) {\n        if (this.isTypesetting()) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes(), context, parameters);\n            this.drawTables(components, recognitionResult.getTables(), context, parameters);\n            this.drawTextLines(components, recognitionResult.getTextLines(), context, parameters);\n//        this.drawGroups(strokes, recognitionResult.getGroups(), context); // TODO: not implemented\n        } else {\n            this.drawComponents(components, context, parameters);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components, context, parameters) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component, context, parameters);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component, context, parameters); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @method drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTables = function (components, tables, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        for (var i in tables) {\n            if (this.getShowBoundingBoxes()) {\n                for (var j in tables[i].getCells()) {\n                    this.drawCell(tables[i].getCells()[j], context);\n                }\n            }\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), this.getContext(), this.getParameters());\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @method drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                if (this.getShowBoundingBoxes()) {\n                    this.drawRectangle(data.getBoundingBox(), context, parameters);\n                }\n\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                this.drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    this.drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @method drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n        var params = this.getParameters();\n\n        this.getContext().save();\n        try {\n            this.getContext().fillStyle = params.getColor();\n            this.getContext().strokeStyle = params.getColor();\n            this.getContext().globalAlpha = params.getAlpha();\n            this.getContext().lineWidth = 0.5 * params.getWidth();\n            this.getContext().font = params.getDecoration() + textHeight + 'px ' + params.getFont();\n            this.getContext().textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            this.getContext().fillText(text, boundingBox.getX(), baseline, boundingBox.getWidth());\n\n        } finally {\n            this.getContext().restore();\n        }\n    };\n\n    /**\n     * Draw Underline\n     *\n     * @method drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        if (context) {\n            this._setContext(context);\n        }\n        if (parameters) {\n            this.setParameters(parameters);\n        }\n\n        var params = this.getParameters();\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        this.getContext().font = params.getDecoration() + textHeight + 'px ' + params.getFont();\n\n        var textMetrics = this.getContext().measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = this.getContext().measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), this.getContext(), params);\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @method drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @method drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} [context] DEPRECATED, use renderer constructor instead\n     * @param {PenParameters} [parameters] DEPRECATED, use setParameters instead\n     */\n    AnalyzerRenderer.prototype.drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            this.drawRectangle(cell.getData().getBoundingBox(), context, parameters);\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.globalAlpha = parameters.getAlpha();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.setAlpha(this.penParameters.getAlpha());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawStroke(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        // Capture\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer(options? options.host : undefined);\n        this._mathRecognizer = new scope.MathRecognizer(options? options.host : undefined);\n        this._shapeRecognizer = new scope.ShapeRecognizer(options? options.host : undefined);\n        this._musicRecognizer = new scope.MusicRecognizer(options? options.host : undefined);\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer(options? options.host : undefined);\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this), options? options.host : undefined);\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this), options? options.host : undefined);\n\n        this._attachListeners(element);\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        this._initialize(this._getOptions());\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        this._captureCanvas.width = width;\n        this._renderingCanvas.width = width;\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        this._captureCanvas.height = height;\n        this._renderingCanvas.height = height;\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this.lastNonRecoComponentIdx = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @deprecated Use setTextParameters instead\n     * @method setLanguage\n     * @param  String language\n     */\n    InkPaper.prototype.setLanguage = function (language) {\n        if(this.options.type === scope.RecognitionType.TEXT){\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setLanguage(language);\n        }\n    };\n\n    /**\n     * Set math recognition format result types\n     *\n     * @deprecated Use setMathParameters instead\n     * @method setResultTypes\n     * @param  Array resultTypes\n     */\n    InkPaper.prototype.setResultTypes = function (resultTypes) {\n        if(this.options.type === scope.RecognitionType.MATH){\n            this.isStarted = false;\n            this._selectedWSRecognizer.resetWSRecognition();\n            this._selectedWSRecognizer.getParameters().setResultTypes(resultTypes.map(function(x) { return x.toUpperCase(); }));\n        }\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._textRenderer.getParameters()[i] = penParameters[i]; // Override options\n                    this._mathRenderer.getParameters()[i] = penParameters[i]; // Override options\n                    this._shapeRenderer.getParameters()[i] = penParameters[i]; // Override options\n                    this._musicRenderer.getParameters()[i] = penParameters[i]; // Override options\n                    this._analyzerRenderer.getParameters[i] = penParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * @private\n     * @method _initialize\n     * @param {Object} options\n     */\n    InkPaper.prototype._initialize = function (options) {\n\n        this._setHost(options.host);\n\n        this.setTextParameters(options.textParameters); // jshint ignore:line\n        this.setMathParameters(options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(options.analyzerParameters); // jshint ignore:line\n\n        // Recognition type\n        this.setType(options.type);\n        this.setProtocol(options.protocol);\n        this.setTimeout(options.timeout);\n        this.setApplicationKey(options.applicationKey);\n        this.setHmacKey(options.hmacKey);\n\n        this.setPenParameters(options.penParameters);\n        this.setTypeset(options.typeset);\n\n        this.setWidth(options.width);\n        this.setHeight(options.height);\n    };\n\n    /**\n     * Get options\n     *\n     * @private\n     * @method _getOptions\n     * @returns {Object}\n     */\n    InkPaper.prototype._getOptions = function () {\n        return this.options;\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @returns {Promise}\n     */\n    InkPaper.prototype.getAvailableLanguages = function () {\n        return this._selectedRecognizer.getAvailableLanguageList(this.getApplicationKey(), this._textRecognizer.getParameters().getInputMode());\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the recognition callback\n     *\n     * @method setCallback\n     * @deprecated Use setResultCallback instead\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     */\n    InkPaper.prototype.setCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        return this._doRecognition(this.components);\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this.components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            this.redoComponents.push(this.components.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this.redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this.components.push(this.redoComponents.pop());\n\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this.lastNonRecoComponentIdx = 0;\n                if (this._instanceId) {\n                    this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                    this._inkGrabber.clear();\n                    this._instanceId = undefined;\n                }\n            }\n            this._initRenderingCanvas();\n            this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > 0) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else if (this.getTimeout() > -1) {\n                    this.recognize();\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            if (this._instanceId) {\n                this._selectedRecognizer.clearShapeRecognitionSession(this.getApplicationKey(), this._instanceId);\n                this._instanceId = undefined;\n            }\n        }\n        this.components = [];\n        this.redoComponents = [];\n        this.lastNonRecoComponentIdx = 0;\n        this._inkGrabber.clear();\n        this._instanceId = undefined;\n\n        this._initRenderingCanvas();\n        this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n\n        if(this._captureCanvas.clientHeight != this._captureCanvas.height){\n            this._captureCanvas.height = this._captureCanvas.clientHeight;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight;\n        }\n        if(this._captureCanvas.clientWidth != this._captureCanvas.width){\n            this._captureCanvas.width = this._captureCanvas.clientWidth;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth;\n        }\n\n        if (this.canRedo()) {\n            this.redoComponents = [];\n            this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n        }\n        this._inkGrabber.startCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this.components.push(stroke);\n        this._onChange({canUndo: this.canUndo(), canRedo: this.canRedo()});\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > 0) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else if (this.getTimeout() > -1) {\n                this.recognize();\n            }\n        }\n    };\n\n    /**\n     * Do recognition\n     *\n     * @private\n     * @method _doRecognition\n     * @param {AbstractComponent[]} components Input components\n     */\n    InkPaper.prototype._doRecognition = function (components) {\n        if (components.length > 0) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                if (this._initialized) {\n                    var inputWS = [];\n                    if (this._selectedRecognizer instanceof scope.TextWSRecognizer) {\n                        var inputUnitWS = new scope.TextInputUnit();\n                        inputUnitWS.setComponents(this._getOptions().components.concat(components.slice(this.lastNonRecoComponentIdx)));\n                        inputWS = [inputUnitWS];\n                    } else {\n                        inputWS = components.slice(this.lastNonRecoComponentIdx);\n                    }\n                    this.lastNonRecoComponentIdx = components.length;\n\n\n                    if (this.isStarted) {\n                        this._selectedRecognizer.continueWSRecognition(inputWS, this._instanceId);\n                    } else {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(inputWS);\n                    }\n                }\n            } else {\n                var input = [];\n                if (this._selectedRecognizer instanceof scope.TextRecognizer) {\n                    var inputUnit = new scope.TextInputUnit();\n                    inputUnit.setComponents(this._getOptions().components.concat(components));\n                    input = [inputUnit];\n                } else if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                    input = components.slice(this.lastNonRecoComponentIdx);\n                    this.lastNonRecoComponentIdx = components.length;\n                } else {\n                    input = input.concat(this._getOptions().components, components);\n                }\n                this._selectedRecognizer.doSimpleRecognition(\n                    this.getApplicationKey(),\n                    this._instanceId,\n                    input,\n                    this.getHmacKey()\n                ).then(\n                    function (data) {\n                        return this._parseResult(data, input);\n                    }.bind(this),\n                    function (error) {\n                        this._onResult(undefined, error);\n                        return error;\n                    }.bind(this)\n                ).done();\n            }\n        } else {\n            this.isStarted = false;\n            this._selectedRenderer.clear();\n            this._initRenderingCanvas();\n            this._onResult();\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('failure', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function (changes) {\n        if (this.changeCallback) {\n            this.changeCallback(changes)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: changes}));\n    };\n\n    InkPaper.prototype._parseResult = function (data, input) {\n\n        if (!this._instanceId) {\n            this._instanceId = data.getInstanceId();\n        } else if (this._instanceId !== data.getInstanceId()) {\n            this._onResult(data);\n            return data;\n        }\n\n        if (data.getDocument().hasScratchOutResults() || this._selectedRenderer.isTypesetting()) {\n            this._selectedRenderer.clear();\n            this._selectedRenderer.drawRecognitionResult(input, data.getDocument());\n        }\n\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service host\n     *\n     * @private\n     * @param {String} host\n     */\n    InkPaper.prototype._setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n                console.log('pointerenter');\n                console.log(e);\n            }\n        }, false);\n\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n        this._drawInput(this.components);\n    };\n\n    InkPaper.prototype._drawInput = function (components) {\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            } else {\n                throw new Error('Missing music staff');\n            }\n        }\n        this._selectedRenderer.drawComponents(this._getOptions().components.concat(components));\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this.lastNonRecoComponentIdx = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge (this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this.lastNonRecoComponentIdx = 0;\n                    break;\n                default: {\n                    this._parseResult(message, this.components);\n                    break;\n                }\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n"],"sourceRoot":"/source/"}